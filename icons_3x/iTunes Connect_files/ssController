'use strict';
define(['sbl!app'], function (itcApp) {

    var ssController = function ($scope,$rootScope,$state,$stateParams,$upload,$filter,$timeout, $sce, ai, promoArtService, appVersionReferenceDataService,$q,ITC,univPurchaseService, getLocKeyFromRootAndDevice) {
        log("ssController");
        var parentScope = $scope.$parent.$parent; // note - should this move back to parent controller, replace use of parentScope by $scope.

        $scope.IPHONE_GROUP = "iphone";
        $scope.IPAD_GROUP = "ipad";
        
        var MAX_THUMBNAIL_SCREENSHOT_SIZE = 500;
        var MAX_THUMBNAIL_SS_SCREENSHOT_SIZE = 300;
        var THUMBNAIL_ICON_SIZE = 150;
        var THUMBNAIL_WATCH_ICON_SIZE = 160;

        $scope.largestDevs = {};

        parentScope.confirmScaling = function(loc, device, msgsMedia) {
            var hasMedia = $scope.hasMedia(loc, device, msgsMedia);
            var editable = $scope.isScaledCheckboxEditable(loc, device, msgsMedia);
            if (hasMedia && editable) {
                $scope.modalsDisplay.confirmScaleCheckBoxCheck = true;
                $scope.modalsDisplay.confirmScalingLoc = loc;
                $scope.modalsDisplay.confirmScalingDev = device;
                $scope.modalsDisplay.confirmScalingMsgsMedia = msgsMedia;
                var promise = new Promise(function(resolve, reject) {
                    // watch for when the modal closes
                    var unbind = parentScope.$watch('modalsDisplay.confirmScaleCheckBoxCheck', function(newVal, oldVal) {
                        if (newVal === false) { 
                            if ($scope.modalsDisplay.confirmScaleCheckBoxCheckYES) {
                                resolve();
                            }
                            else {
                                reject(Error());
                            }
                            unbind();
                        }
                    }, true);  
                });
                return promise;
            }
            else {
                return null; // no promise and no need to pop up confirm dialog.
            }
        }

        parentScope.confirmScaleCheckBoxCheckYes = function() {
            $scope.modalsDisplay.confirmScaleCheckBoxCheckYES = true;
            $scope.modalsDisplay.confirmScaleCheckBoxCheck = false;
        }

        parentScope.confirmScaleCheckBoxCheckNo = function() {
            $scope.modalsDisplay.confirmScaleCheckBoxCheckYES = false;
            $scope.modalsDisplay.confirmScaleCheckBoxCheck = false;
        }

        parentScope.getScaleConfirmModalHeader = function() {
            var header;
            if ($scope.versionInfo && $scope.l10n && $scope.tempPageContent.mediaData) {
                var parentGroup = $scope.getMediaDataValue($scope.modalsDisplay.confirmScalingLoc, $scope.modalsDisplay.confirmScalingDev, $scope.modalsDisplay.confirmScalingMsgsMedia, "groupToInheritFromIfScaled");
                if (parentGroup) {
                    var parentDevice = $scope.l10n.interpolate('ITC.apps.deviceFamily.forModals.inSentence.' + parentGroup.dev);
                    var localeCode = $scope.getLanguageString($scope.modalsDisplay.confirmScalingLoc);
                    var isPrimary = $scope.isCurrentPrimaryLanguage(localeCode);
                    if (isPrimary) {
                        if ($scope.allowsVideo($scope.modalsDisplay.confirmScalingDev, $scope.modalsDisplay.confirmScalingLoc, $scope.modalsDisplay.confirmScalingMsgsMedia)) {
                            var locKey = getLocKeyFromRootAndDevice('ITC.apps.ss.confirmScaling.header.primaryLoc.withPreviews.', parentGroup.dev);
                            header = $scope.l10n.interpolate(locKey, 
                                {'parentDevice': parentDevice});
                        } else {
                            var locKey = getLocKeyFromRootAndDevice('ITC.apps.ss.confirmScaling.header.primaryLoc.withoutPreviews.', parentGroup.dev);
                            header = $scope.l10n.interpolate(locKey, 
                                {'parentDevice': parentDevice});
                        }
                    }
                    else {
                        var parentLoc = $scope.l10n.interpolate($scope.getLocaleKey(parentGroup.loc.toLowerCase(), true));
                        var locKey = getLocKeyFromRootAndDevice('ITC.apps.ss.confirmScaling.header.nonPrimaryLoc.', parentGroup.dev);
                        header = $scope.l10n.interpolate(locKey, 
                                {'parentDevice': parentDevice, 'parentLoc': parentLoc});
                    }
                }                
            }
            return header;
        }

        parentScope.getScaleConfirmModalDescriptionPart1 = function() {
            var header;
            if ($scope.versionInfo && $scope.l10n && $scope.tempPageContent.mediaData) {
                var parentGroup = $scope.getMediaDataValue(
                    $scope.modalsDisplay.confirmScalingLoc, $scope.modalsDisplay.confirmScalingDev, $scope.modalsDisplay.confirmScalingMsgsMedia, "groupToInheritFromIfScaled");
                if (parentGroup) {
                    var device = $scope.l10n.interpolate('ITC.apps.deviceFamily.forModals.inSentence.' + $scope.modalsDisplay.confirmScalingDev);
                    var localeCode = $scope.getLanguageString($scope.modalsDisplay.confirmScalingLoc);
                    var isPrimary = $scope.isCurrentPrimaryLanguage(localeCode);
                    if (isPrimary) {
                        var hasAppPreview = $scope.hasAppPreview($scope.modalsDisplay.confirmScalingLoc, $scope.modalsDisplay.confirmScalingDev, $scope.modalsDisplay.confirmScalingMsgsMedia);
                        var allowsVideo = $scope.allowsVideo($scope.modalsDisplay.confirmScalingDev, $scope.modalsDisplay.confirmScalingLoc, $scope.modalsDisplay.confirmScalingMsgsMedia);
                        if (hasAppPreview && allowsVideo) { // probably find to just check hasAppPreview, but also checking allowsVideo doesn't hurt
                            var locKey = getLocKeyFromRootAndDevice('ITC.apps.ss.confirmScaling.description.sentence1.primaryLoc.withPreviews.', $scope.modalsDisplay.confirmScalingDev);
                            header = $scope.l10n.interpolate(locKey, 
                                {'device': device});
                        } else {
                            var locKey = getLocKeyFromRootAndDevice('ITC.apps.ss.confirmScaling.description.sentence1.primaryLoc.withoutPreviews.', $scope.modalsDisplay.confirmScalingDev);
                            header = $scope.l10n.interpolate(locKey, 
                                {'device': device});
                        }
                    }
                    else {
                        var locLocalized = $scope.l10n.interpolate($scope.getLocaleKey(localeCode.toLowerCase(), true));
                        var locKey = getLocKeyFromRootAndDevice('ITC.apps.ss.confirmScaling.description.sentence1.nonPrimaryLoc.', $scope.modalsDisplay.confirmScalingDev);
                        header = $scope.l10n.interpolate(locKey, 
                                {'loc': locLocalized, 'device': device});
                    }
                }                
            }
            return header;
        }

        parentScope.getScaleConfirmModalDescriptionPart2 = function() {
            var header = "";
            if ($scope.versionInfo && $scope.l10n && $scope.tempPageContent.mediaData) {
                var parentGroup = $scope.getMediaDataValue(
                    $scope.modalsDisplay.confirmScalingLoc, $scope.modalsDisplay.confirmScalingDev, $scope.modalsDisplay.confirmScalingMsgsMedia, "groupToInheritFromIfScaled"); 
                if (parentGroup) {
                    var device = $scope.l10n.interpolate('ITC.apps.deviceFamily.forModals.' + $scope.modalsDisplay.confirmScalingDev);
                    var localeCode = $scope.getLanguageString($scope.modalsDisplay.confirmScalingLoc);
                    var isPrimary = $scope.isCurrentPrimaryLanguage(localeCode);
                    var isSmallestDev = $scope.isSmallestDevInGroup($scope.modalsDisplay.confirmScalingDev, $scope.modalsDisplay.confirmScalingMsgsMedia);
                    if (isPrimary) {
                        if (isSmallestDev) {
                            header = $scope.l10n.interpolate('ITC.apps.ss.confirmScaling.description.sentence2.primaryLoc.smallestDev');
                        } else {
                            header = $scope.l10n.interpolate('ITC.apps.ss.confirmScaling.description.sentence2.primaryLoc.notSmallestDev');
                        }
                    }
                    else {
                        if (!isSmallestDev) {
                            var devGroup = $scope.getDeviceGroupNameFromDevice($scope.modalsDisplay.confirmScalingDev);
                            var devGroupLocalized = $scope.l10n.interpolate('ITC.apps.deviceFamily.group.' + devGroup);
                            header = $scope.l10n.interpolate('ITC.apps.ss.confirmScaling.description.sentence2.nonPrimaryLoc.notSmallestDev', 
                                {'deviceGroup': devGroupLocalized});
                        }
                    }
                }                
            }
            return header;
        }

        parentScope.getScaleConfirmOkButtonText = function() {
            var text;
            if ($scope.versionInfo && $scope.l10n && $scope.tempPageContent.mediaData) {
                /*var parentGroup = $scope.tempPageContent.mediaData.getDataValue(
                    $scope.modalsDisplay.confirmScalingLoc, $scope.modalsDisplay.confirmScalingDev, "groupToInheritFromIfScaled");
                if (parentGroup) {
                    var parentDevice = $scope.l10n.interpolate('ITC.apps.deviceFamily.long.' + parentGroup.dev);
                    var locKey = getLocKeyFromRootAndDevice('ITC.apps.ss.CheckboxText.withoutLang.', parentGroup.dev);
                    text = $scope.l10n.interpolate(locKey, {'device': parentDevice});
                } */    
                text = $scope.l10n.interpolate('ITC.Use.Button'); // simplifying the button text      
            }
            return text;

        }
        parentScope.$on('videoAddedOrPosterFrameChanged', function(event, data) { 
            var vids = $scope.tempPageContent.allVideos.getGroup("ALL LANGUAGES", data.device);

            if (vids.length === 1) { 
                var vid = vids[0];
                var imageFile;
                var videoFile = data.videoFile;
                var previewTimestamp = vid.previewTimestamp;
                var isPortrait = vid.isPortrait;
                if (vid.uploaded) { 
                    log("vid was uploaded");
                    imageFile = $scope.createPreviewImageFile(vid.data);
                    if (vid.isUserGrab) {
                        log("is a grab - calling uploadVideoPreviewImageFile");
                        // upload video preview image 
                        var url = URL.createObjectURL(imageFile);
                        $scope.uploadVideoPreviewImageFile(imageFile, url, data.device, $scope.currentLoc, previewTimestamp, isPortrait); // not sure that sort order matters
                    }
                    else {
                        log("isn't a grab - calling videoUploadFile");
                        $scope.videoUploadFile(videoFile, imageFile, previewTimestamp, isPortrait, data.device); // call uploadVideoPreviewImageFile from there
                    }
                }
                else if (vid.isUserGrab) { // is a user grab but video is from the server
                    log("just a previewImageChange");
                    // upload video preview image 
                    imageFile = $scope.createPreviewImageFile(vid.data);
                    var url = URL.createObjectURL(imageFile);
                    $scope.uploadVideoPreviewImageFile(imageFile, url, data.device, $scope.currentLoc, previewTimestamp, isPortrait);
                    vid.justAPreviewImageChange = false;
                }
            }
        });

        parentScope.changeMMTab = function(tabSelection) {
            parentScope.currentMMTab = tabSelection;
        }

        parentScope.isCurrentMMTab = function(tabName) {
            return (tabName === parentScope.currentMMTab);
        }

        $scope.isMediaManagerShowing = function() {
            return $scope.tempPageContent.showMediaManager;
        }

        parentScope.videoDropped = function(data, device) {  
            //console.log("videoDropped: " + data.url);
            var vids = $scope.tempPageContent.allVideos.getGroup("ALL LANGUAGES", device);
            if (vids.length < $scope.getNumVideosForDevice(device, $scope.currentLoc)) { 
                $scope.tempPageContent.appPreviewSnapshotShowing = false;  
                $scope.tempPageContent.appPreviewDropped = true;
                $scope.$apply(); // so loader appears NOW.
                data.upload = true; // do upload 
                //$scope.$broadcast('setVideoURL', data);
                $scope.setMediaDataValue($scope.currentLoc, device, false, "videoDropData", data); // TBD: determine if vid is msgs or not
                $scope.$apply();
            }
            else {
                var error = $scope.l10n.interpolate('ITC.AppVersion.Media.ErrorMessages.AppPreviewAlreadySelected');
                $scope.setMediaDataValue($scope.currentLoc, device, false, "errorInPopup", error); // TBD: determine if vid is msgs or not
            }
        };


        $scope.initCantPlayVideoListeners = function() {
            _.each($scope.deviceNamesToDisplay, function(device) {
                var unbind = parentScope.$watch('snapshotInfo.cantPlayVideo', function(newVal, oldVal) {
                    if (newVal && newVal[device]) { // if video snapshot grab directive set cantPlayVideo to true, set previewVideos[0].cantPlayVideo to true.
                        var vids = $scope.tempPageContent.allVideos.getGroup("ALL LANGUAGES", device);
                        if (vids && vids.length>0) {
                            vids[0].cantPlayVideo = true;
                        }
                        unbind();
                    }
                }, true);
            });
        }

        /* Ah, Lost */
        parentScope.getOthers = function(msgsMedia) {
            var others;
            if (msgsMedia) {
                others = $scope.othersMsgs;
            }
            else {
                others = $scope.others;
            }
            return others;
        }

        parentScope.setOthers = function(others, msgsMedia) {
            if (msgsMedia) {
                parentScope.othersMsgs = others;
            }
            else {
                $scope.others = others;
            }
        }

        parentScope.othersExist = function(msgsMedia) {
            var others = $scope.getOthers(msgsMedia);
            return (others && others.length > 0);
        }

        parentScope.getTotalOtherSizes = function(msgsMedia) {
            var others = $scope.getOthers(msgsMedia);
            var stackImageCount;
            if (msgsMedia) {
                stackImageCount = $scope.tempPageContent.stackMsgImageCount;  
            }
            else {
                stackImageCount = $scope.tempPageContent.stackImageCount;
            }
            var total = 0;
            _.each(others, function(otherDev) {
                total += stackImageCount[otherDev];
            });
            return total;
        }

        // Updates some variables from data received from the server for app trailer
        // Note: this method should be called first from loadAppDetails() then
        // any time $scope.currentLoc changes and 
        // anytime $scope.currentDevice changes. 
        parentScope.updateSnapshotDetails = function(async, mediaExisted) {
            if ($scope.isMediaManagerShowing()) {
                $scope.updateSnapshotDetailsInMediaManager();
                return;
            }

            if (!$scope.currentDevice) {
                return;
            }

            log("ss's updateSnapshotDetails");

            $scope.setOthers($scope.getAllDevsSmallerThan($scope.currentDevice));

            parentScope.tempPageContent.openStackSection = $scope.hasStackError($scope.currentLoc, false);
            parentScope.tempPageContent.openMsgsStackSection = $scope.hasStackError($scope.currentLoc, true);
            
            if (!$scope.tempPageContent.stackImageCount) {
                $scope.tempPageContent.stackImageCount = {};
            }

            // Don't do this here or it will reset between iphone/ipad pill changes
            //parentScope.watchSectionOpen = $scope.hasWatchData() || $scope.hasBinaryThatSupportsAppleWatch(); // should happen once
            
            var error = $scope.getErrorsInGroup(parentScope.currentLoc, parentScope.currentDevice); //false; // clear out any errors from previous device/lang group. 
            $scope.setMediaDataValue($scope.currentLoc, $scope.currentDevice, false, "errorInPopup", error);
            
            var watcherror = $scope.getErrorsInGroup(parentScope.currentLoc, 'watch'); //false; // clear out any errors from previous device/lang group. 
            $scope.setMediaDataValue($scope.currentLoc, 'watch', false, "errorInPopup", error);
            
            parentScope.snapshotInfo.totalImageWidth = 0; // always start a new batch of images off with a totalImageWidth (before any are added) of 0.
            var videoWasLoading = ($scope.tempPageContent.appPreviewSnapshotShowing === false);
            parentScope.tempPageContent.appPreviewSnapshotShowing = true; 
            parentScope.tempPageContent.appPreviewDropped = false;
            parentScope.numImagesNotReady = 0;
            parentScope.snapshotInfo.maxHeight = 0;
            parentScope.snapshotInfo.showSlideShow = false;
            parentScope.snapshotInfo.currentIndex = -1;
            parentScope.snapshotInfo.videoShowing = false;
            parentScope.snapshotInfo.cantPlayVideo = {};
            parentScope.snapshotInfo.cantPlayVideo[$scope.currentDevice] = false;

            parentScope.snapshotInfo.grabHasHappenedBefore = false;
            parentScope.tempPageContent.imagesNotYetLoaded = 0;

            parentScope.sortableOptions2.disabled = !$scope.areImagesEditableTopLevel();
       
            var that = this;
            var func = function() { 

                parentScope.dontShowInstructions = true;       

                var timeoutDelay = 0;   
                if (mediaExisted) {
                    timeoutDelay = 500;
                }        
                
                $timeout(function() {

                    var langStr = parentScope.getLanguageString(parentScope.currentLoc);  
                    $scope.updateGroupsToInheritFrom(null, false);
                    
                    var devsToInitialize;
                    var devs = $scope.getDevsInGroupWith($scope.currentDevice);
                    if ($scope.watchDataExists()) {
                        $scope.setGroupToInheritFrom($scope.currentLoc, 'watch', false);
                        devsToInitialize = angular.copy(devs);
                        devsToInitialize.push('watch');
                    }
                    else {
                        devsToInitialize = devs;
                    }
                    
                    _.each(devsToInitialize, function(device) {
                        parentScope.snapshotInfo.cantPlayVideo[device] = false;

                        var overridden = $scope.areImagesOverridden($scope.currentLoc, device, false);
                        $scope.setMediaDataValue($scope.currentLoc, device, false, "scaleImages", overridden);
                        
                        if (!$scope.areImagesOverridden($scope.currentLoc, device, false) || $scope.dontShowScaleImagesCheckbox($scope.currentLoc, device)) { 
                            $scope.initializeImages($scope.currentLoc, device);
                        }
                        else {
                            // initialize parent's images before calling inheritImages
                            var parentGroup = $scope.getMediaDataValue($scope.currentLoc, device, false, "groupToInheritFromIfScaled");
                            var parentLocIndex = $scope.getLanguageKey(parentGroup.loc);
                            $scope.initializeImages(parentLocIndex, parentGroup.dev);
                            
                            var group = {};
                            group.dev = device;
                            group.loc = $scope.currentLoc;
                            $scope.inheritImages(group);
                        }

                        $scope.setMediaDataValue($scope.currentLoc, device, false, "refresh", true); 
                        parentScope.dontShowInstructions = false; 
                    });    

                    $scope.setupScrollListeners();

                }, timeoutDelay); // wait for disappearing images to animate away.
            };

            // Why a $timeout? Because of the important $apply call below that has to happen before the 
            // $broadcast. Without this $timeout, an exception occurs if a digest cycle is in progress. 
            // Since this method is called during a digest cycle (from $scope.loadAppDetails), 
            // an exception occurs otherwise. More info here: 
            // http://stackoverflow.com/questions/23070822/angular-scope-apply-vs-timeout-as-a-safe-apply
            if (async) {
                $timeout(func);
            }
            else {
                func();
            }
        };

        parentScope.hasMsgsData = function() {
            var hasScreenshotsInAtLeastOneDev = false;
            var devs = $scope.getAllDevicesForApp(); 

            var screenshotsArr, hasScreenshots;
            _.each(devs, function(device) {
                screenshotsArr = $scope.getMsgsScreenshotsArr($scope.currentLoc, device); 
                hasScreenshots = screenshotsArr && screenshotsArr.length>0;
                if (hasScreenshots) {
                    hasScreenshotsInAtLeastOneDev = true;
                }
            });
            return hasScreenshotsInAtLeastOneDev;
        }

        parentScope.messagesSectionToggleShouldBeDisabled = function() {
            return ($scope.hasBinaryThatSupportsMessages() || $scope.hasMsgsData()) && $scope.messagesSectionOpen; 
        }

        parentScope.hasBinaryThatSupportsMessages = function() {
            // check preReleaseBuild.messagesIconAssetToken. This may need to change if backend adds a proper flag.
            return  $scope.versionInfo && $scope.versionInfo.preReleaseBuild && $scope.versionInfo.preReleaseBuild.messagesIconAssetToken;
        }

        parentScope.updateMsgSnapshotDetails = function(async, mediaExisted) {
            if ($scope.isMediaManagerShowing()) {
                $scope.updateSnapshotDetailsInMediaManager();
                return;
            }

            if (!$scope.currentMsgsDevice) {
                return;
            }

            log("ss's updateMSGSnapshotDetails");

            $scope.setOthers($scope.getAllDevsSmallerThan($scope.currentMsgsDevice), true);

            if (!$scope.tempPageContent.stackMsgImageCount) {
                $scope.tempPageContent.stackMsgImageCount = {};
            }

            // Don't do this here or it will reset between iphone/ipad pill changes
            //parentScope.messagesSectionOpen = $scope.hasMsgsData() || $scope.hasBinaryThatSupportsMessages();

            var error = $scope.getErrorsInGroup(parentScope.currentLoc, parentScope.currentMsgsDevice, true); //false; // clear out any errors from previous device/lang group. 
            $scope.setMediaDataValue($scope.currentLoc, $scope.currentMsgsDevice, true, "errorInPopup", error);

            parentScope.sortableOptions2.disabled = !$scope.areImagesEditableTopLevel();
       
            var that = this;
            var func = function() { 

                var timeoutDelay = 0;   
                if (mediaExisted) {
                    timeoutDelay = 500;
                }        
                
                $timeout(function() {

                    var langStr = parentScope.getLanguageString(parentScope.currentLoc);  
                    $scope.updateGroupsToInheritFrom(null, true);
                    
                    var devsToInitialize;
                    var devs = $scope.getDevsInGroupWith($scope.currentMsgsDevice);
                    /*if ($scope.watchDataExists()) {
                        $scope.setGroupToInheritFrom($scope.currentLoc, 'watch', false);
                        devsToInitialize = angular.copy(devs);
                        devsToInitialize.push('watch');
                    }
                    else { */
                        devsToInitialize = devs;
                    //}
                    
                    _.each(devsToInitialize, function(device) {

                        var overridden = $scope.areImagesOverridden($scope.currentLoc, device, true);
                        $scope.setMediaDataValue($scope.currentLoc, device, true, "scaleImages", overridden);

                        $scope.setMediaDataValue($scope.currentLoc, device, true, "open", !overridden || $scope.isLargestDevInGroup(device) || $scope.scrollToDevice===device);
                        
                        if (!$scope.areImagesOverridden($scope.currentLoc, device, true) || $scope.dontShowScaleImagesCheckbox($scope.currentLoc, device, true)) { 
                            $scope.initializeImages($scope.currentLoc, device, true);
                        }
                        else {  
                            // initialize parent's images before calling inheritImages
                            var parentGroup = $scope.getMediaDataValue($scope.currentLoc, device, true, "groupToInheritFromIfScaled");
                            var parentLocIndex = $scope.getLanguageKey(parentGroup.loc);
                            $scope.initializeImages(parentLocIndex, parentGroup.dev, true);
                            
                            var group = {};
                            group.dev = device;
                            group.loc = $scope.currentLoc;
                            $scope.inheritImages(group, true);
                        }

                        $scope.setMediaDataValue($scope.currentLoc, device, true, "refresh", true);
                    });    

                    //$scope.setupScrollListeners();

                }, timeoutDelay); // wait for disappearing images to animate away.
            };

            // Why a $timeout? Because of the important $apply call below that has to happen before the 
            // $broadcast. Without this $timeout, an exception occurs if a digest cycle is in progress. 
            // Since this method is called during a digest cycle (from $scope.loadAppDetails), 
            // an exception occurs otherwise. More info here: 
            // http://stackoverflow.com/questions/23070822/angular-scope-apply-vs-timeout-as-a-safe-apply
            if (async) {
                $timeout(func);
            }
            else {
                func();
            }
        };

        parentScope.updateMsgSnapshotDetailsInMM = function(async, mediaExisted) {
            
            log("ss's updateMsgSnapshotDetailsInMM");

            //var error = $scope.getErrorsInGroup(parentScope.currentLoc, parentScope.currentMsgsDevice, true); //false; // clear out any errors from previous device/lang group. 
            //$scope.setMediaDataValue($scope.currentLoc, $scope.currentMsgsDevice, true, "errorInPopup", error);

            var that = this;
            var func = function() { 

                var timeoutDelay = 0;   
                if (mediaExisted) {
                    timeoutDelay = 500;
                }        
                
                $timeout(function() {

                    var langStr = parentScope.getLanguageString(parentScope.currentLoc);  
                    $scope.updateGroupsToInheritFrom(null, true);
                    
                    var devsToInitialize = $scope.getAllDevicesForApp(); 
                    
                    _.each(devsToInitialize, function(device) {

                        var overridden = $scope.areImagesOverridden($scope.currentLoc, device, true);
                        $scope.setMediaDataValue($scope.currentLoc, device, true, "scaleImages", overridden);

                        $scope.setMediaDataValue($scope.currentLoc, device, true, "open", !overridden || $scope.isLargestDevInGroup(device) || $scope.scrollToDevice===device);
                        
                        if (!$scope.areImagesOverridden($scope.currentLoc, device, true) || $scope.dontShowScaleImagesCheckbox($scope.currentLoc, device, true)) { 
                            $scope.initializeImages($scope.currentLoc, device, true);
                        }
                        else {  
                            // initialize parent's images before calling inheritImages
                            var parentGroup = $scope.getMediaDataValue($scope.currentLoc, device, true, "groupToInheritFromIfScaled");
                            var parentLocIndex = $scope.getLanguageKey(parentGroup.loc);
                            $scope.initializeImages(parentLocIndex, parentGroup.dev, true);
                            
                            var group = {};
                            group.dev = device;
                            group.loc = $scope.currentLoc;
                            $scope.inheritImages(group, true);
                        }

                        $scope.setMediaDataValue($scope.currentLoc, device, true, "refresh", true);
                    });    

                    //$scope.setupScrollListeners();

                }, timeoutDelay); // wait for disappearing images to animate away.
            };

            // Why a $timeout? Because of the important $apply call below that has to happen before the 
            // $broadcast. Without this $timeout, an exception occurs if a digest cycle is in progress. 
            // Since this method is called during a digest cycle (from $scope.loadAppDetails), 
            // an exception occurs otherwise. More info here: 
            // http://stackoverflow.com/questions/23070822/angular-scope-apply-vs-timeout-as-a-safe-apply
            if (async) {
                $timeout(func);
            }
            else {
                func();
            }
        };

        $scope.smoothScroll = function() {
            var scrollToHere;
            var contentWrapper = $('.pane-layout-content-wrapper.scrollMe');
            if ($scope.scrollToDevice) {
                var contentWrapperOffset = contentWrapper.offset().top;
                var devContainer;
                if ($scope.isCurrentMMTab('iMessage')) {
                    devContainer = $("." + $scope.scrollToDevice + "Container.msgsScreenshotsContainer"); 
                }
                else { 
                    devContainer = $("." + $scope.scrollToDevice + "Container");
                }
                scrollToHere = devContainer.offset().top - contentWrapperOffset - 5; // -5 just so it shows 5px above the device.  
                parentScope.scrollToDevice = null; // reset in case loc changes       
            }
            else {
                scrollToHere = 0;
            }
            contentWrapper.animate({
                scrollTop: scrollToHere
            }, 500);
        }

        // do the actual video upload
        parentScope.videoUploadFile = function(videoFile, imageFile, timestamp, isPortrait, device) { 

            // get the current loc and device and use them through-out the upcoming ajax call,
            // because the loc and device can change before the progress/success/error callbacks!
            var currentLoc = $scope.currentLoc;
            var currentDevice = device;

            var details = $scope.versionInfo.details.value[currentLoc]; 
            var editable = false;
            var currentDevData = $scope.getAppTrailerFromJSON($scope.currentLoc, device);

            if (currentDevData) {
                editable = currentDevData.isEditable;
            }

            if (editable) {
                
                var langstr = $scope.getLanguageString(currentLoc);
                $scope.tempPageContent.mediaErrors.setErrorValue('ALL LANGUAGES', currentDevice, "videoLoaded", false);
                $scope.tempPageContent.mediaErrors.setErrorValue(langstr, currentDevice, "videoLoadingError", false); 
                
                var vidType = videoFile.type;

                //$scope.imageUploadsInProgress++;
                
                $scope.upload = $upload.upload({
                    url: $scope.referenceData.directUploaderUrls.videoUrl, 
                    method: 'POST',
                    headers: {'Content-Type': vidType,
                              'X-Apple-Upload-Referrer': window.location.href,
                              'X-Apple-Upload-AppleId': $scope.adamId,
                              'X-Apple-Request-UUID': _.guid(),
                              'X-Apple-Upload-itctoken': $scope.appVersionReferenceData.ssoTokenForVideo,
                              'X-Apple-Upload-ContentProviderId': $scope.user.contentProviderId,
                              'X-Original-Filename': $scope.convertToUnicodeStr(videoFile.name)
                             },
                    // withCredentials: true,
                    //data: {myObj: scope.myModelObj},
                    file: videoFile
                }).success(function(data, status, headers, config) {
                    // file is uploaded successfully
                    //console.log("Success uploading video to DU: status - " + status);
                    //console.log(data);
                    
                    $scope.tempPageContent.mediaErrors.setErrorValue('ALL LANGUAGES', currentDevice, "videoLoaded", true);
                    
                    $scope.addAppTrailerDataToMainJson(data, videoFile.type, currentDevice, currentLoc);

                    $scope.popupConfirmSSModalIfNecessary(currentLoc, currentDevice, false);

                    var url = URL.createObjectURL(imageFile);
                    $scope.uploadVideoPreviewImageFile(imageFile, url, currentDevice, currentLoc, timestamp, isPortrait); 
                    
                }).error(function(data, status, headers, config) {
                    console.log("DU ERROR: status: " + status);
                    console.info("DU ERROR: data: ", data);
                
                    var genericMessage = $scope.l10n.interpolate('ITC.AppVersion.DUGeneralErrors.FileNotLoaded');
                    if (data && data.suggestionCode) {
                        var locErrorKey = "ITC.apps.validation."+ data.suggestionCode.toLowerCase(); 
                        var unRenderedHtml = $scope.l10n.interpolate(locErrorKey);
                        var vidError = $scope.renderHtml(unRenderedHtml);
                        if (unRenderedHtml === locErrorKey) {
                            $scope.tempPageContent.mediaErrors.setErrorValue(langstr, currentDevice, "videoLoadingError", genericMessage);
                        } 
                        else {
                            $scope.tempPageContent.mediaErrors.setErrorValue(langstr, currentDevice, "videoLoadingError", vidError);
                        }
                    } else {
                        $scope.tempPageContent.mediaErrors.setErrorValue(langstr, currentDevice, "videoLoadingError", genericMessage);
                    }

                    // fake out save
                    $scope.setIsSaving(false);
                    $scope.saveInProgress = false;
                    
                });
            } else {
                console.log("App Previews for " + $scope.currentDevice + " in " + $scope.getLanguageString($scope.currentLoc) + " are not editable.");
            }
        };

        parentScope.hasStackError = function(loc, msgsMedia) {
            var hasErrors = false;
            var hasDevError;
            _.each($scope.others, function(stackDevice) {
                hasDevError = $scope.getDropwellError(loc, stackDevice, msgsMedia);
                if (hasDevError) {
                    hasErrors = true;
                }
            });
            return hasErrors;
        }

        parentScope.addScreenshotDataToMainJson = function(data, sortOrder, device, language, originalFilename, isMsgsScreenshot) {
            var screenshotData = {};
            screenshotData['value'] = {};
            screenshotData['value']['assetToken'] = data.token;
            screenshotData['value']['sortOrder'] = sortOrder;
            screenshotData['value']['originalFileName'] = originalFilename;
            screenshotData['value']['size'] = data.length;
            screenshotData['value']['width'] = data.width;
            screenshotData['value']['height'] = data.height;
            screenshotData['value']['checksum'] = data.md5;

            var screenshotsArr;
            if (isMsgsScreenshot) {
                screenshotsArr = $scope.getMsgsScreenshotsArr(language, device);
            }
            else {
                screenshotsArr = $scope.getScreenshotsArr(language, device);
            }

            // increment sortOrder of screenshots with greater or equal sortOrders
            var screenshot, currentSortOrder;
            for (var i = 0; i < screenshotsArr.length; i++) {
                screenshot = screenshotsArr[i].value;
                currentSortOrder = screenshot['sortOrder'];
                if (currentSortOrder >= sortOrder) { 
                    screenshot['sortOrder'] = currentSortOrder + 1;
                }
            }                     
            // push the new screenshot
            screenshotsArr.push(screenshotData);

            //console.info("set snapshots in json: ", screenshotsArr);
        }

        // This function is now specific to snapshots (trailer preview images now have their own function: uploadVideoPreviewImageFile)
        parentScope.imageUploadFile = function(file, url, sortOrder, device, language, isMsgsImage) {

            // keep track of how many images are currently uploading
            var numUploading = $scope.getMediaDataValue(language, device, isMsgsImage, "numImagesUploading");
            if (numUploading === undefined || numUploading === null) {
                numUploading = 0;
            }
            
            $scope.setMediaDataValue(language, device, isMsgsImage, "numImagesUploading", numUploading + 1);
            
            var pictureType;
            if (isMsgsImage) {
                pictureType = $scope.referenceData.imageSpecs[device].messagesPictureType;
            }
            else {
                pictureType = $scope.referenceData.imageSpecs[device].pictureType;
            }

            $scope.upload = $upload.upload({
                url: $scope.referenceData.directUploaderUrls.imageUrl, 
                method: 'POST',
                headers: {'Content-Type': file.type,
                          'X-Apple-Upload-Referrer': window.location.href,
                          'X-Apple-Upload-AppleId': $scope.adamId,
                          'X-Apple-Request-UUID': _.guid(),
                          'X-Apple-Upload-itctoken': $scope.appVersionReferenceData.ssoTokenForImage,
                          'X-Apple-Upload-ContentProviderId': $scope.user.contentProviderId,
                          // Reason to convert the string: otherwise if the filename contains characters with 
                          // extended ASCII Codes (>127) we get the following error:
                          // Error: Failed to execute 'setRequestHeader' on 'XMLHttpRequest': '<filename>' is not a valid HTTP header field value.
                          'X-Original-Filename': $scope.convertToUnicodeStr(file.name),      
                          'X-Apple-Upload-Validation-RuleSets': pictureType
                         },
                file: file
            }).progress(function(evt) {
                //console.log('percent: ' + parseInt(100.0 * evt.loaded / evt.total));
                //$scope.progress = parseInt(100.0 * evt.loaded / evt.total);
            }).success(function(data, status, headers, config) {
                // file is uploaded successfully
                //console.log("Success uploading image to DU");
                
                $scope.addScreenshotDataToMainJson(data, sortOrder, device, language, file.name, isMsgsImage);
                var dataPlusImageInfo = {};
                dataPlusImageInfo.data = url;
                dataPlusImageInfo.thumbnailData = url;
                dataPlusImageInfo.videoType = false;
                
                $timeout(function() { // timeout because of $apply(), because we're already in a digest loop. 

                    var langStr = $scope.getLanguageString(language);  
                    var imgs = $scope.getAllImages(isMsgsImage).getGroup(langStr, device);
                    imgs.splice(0, 0, dataPlusImageInfo); // inserts at front
                
                    $scope.popupConfirmSSModalIfNecessary(language, device, isMsgsImage);

                    var numUploading = $scope.getMediaDataValue(language, device, isMsgsImage, "numImagesUploading");
                    $scope.setMediaDataValue(language, device, isMsgsImage, "numImagesUploading", numUploading - 1);

                    //$scope.previewImages.push(dataPlusImageInfo); // inserts at end
                    parentScope.$apply(); // important

                });

            
            }).error(function(data, status, headers, config) {
                console.info("ERROR uploading image to DU: ", data);
                // This commented out code is just to fake things out if DU isn't working.
                /*$scope.addScreenshotDataToMainJson(data, sortOrder, device, language);
                var dataPlusImageInfo = {};
                dataPlusImageInfo.data = url;
                dataPlusImageInfo.videoType = false;
                
                $timeout(function() { // timeout because of $apply(), because we're already in a digest loop. 
                    //console.info("about to insert an image into: ", $scope.previewImages);
                    $scope.previewImages.splice(0, 0, dataPlusImageInfo); // inserts at front
                    //$scope.previewImages.push(dataPlusImageInfo); // inserts at end
                    $scope.$apply(); // important
                    $scope.$broadcast('setImagePreview', 0); 
                });
            
                $scope.imageUploadsInProgress--;
                $scope.numImagesNotReady--;
                */

                // If DU isn't working - comment out the rest here (and uncomment the above)
                var error;
                if (data) {
                    var locErrorKey = "ITC.apps.validation."+ data.suggestionCode.toLowerCase(); 
                    error = $scope.renderHtml($scope.l10n.interpolate(locErrorKey));
                    if ($scope.l10n.interpolate(locErrorKey) === locErrorKey) {
                        error = $scope.l10n.interpolate('ITC.AppVersion.DUGeneralErrors.FileNotLoaded');
                    } 
                } else {
                    error = $scope.l10n.interpolate('ITC.AppVersion.DUGeneralErrors.FileNotLoaded');
                }

                $scope.setIsSaving(false);
                $scope.saveInProgress = false;
                
                if (error) {
                    $scope.setMediaDataValue($scope.currentLoc, device, isMsgsImage, "errorInPopup", error);
                }
                var numUploading = $scope.getMediaDataValue(language, device, isMsgsImage, "numImagesUploading");
                $scope.setMediaDataValue(language, device, isMsgsImage, "numImagesUploading", numUploading - 1);
            });
        };

        $scope.popupConfirmSSModalIfNecessary = function(language, device, msgsMedia) {
            var localeCode = $scope.getLanguageString(language);
            var isPrimary = $scope.isCurrentPrimaryLanguage(localeCode);

            if (isPrimary && $scope.isFirstDrop(language, device, msgsMedia) && $scope.isLargestDevInGroup(device)) { // if this is the first piece of media dropped. 
                // get device group
                var thisGroup = $scope.getDevsInGroupWith(device);
                // get 2nd biggest device (assuming this is the first biggest) in this loc
                var nextBiggestDeviceIsScaled;
                if (thisGroup.length>1) {
                    var nextBiggestDevice = thisGroup[1];
                    nextBiggestDeviceIsScaled = $scope.areImagesOverridden(language, nextBiggestDevice, msgsMedia);
                }
                else {
                    nextBiggestDeviceIsScaled = false;
                }

                var allLocs = Object.keys($scope.versionInfo.details.value);
                var anyLargestDeviceInOtherLocScaled = false;
                _.each(allLocs, function(loc) {
                    var locCode = $scope.getLanguageString(loc);
                    var isLocPrimary = $scope.isCurrentPrimaryLanguage(locCode);

                    if (!isLocPrimary) {
                        var scaled = $scope.areImagesOverridden(loc, device, msgsMedia);
                        if (scaled) {
                            anyLargestDeviceInOtherLocScaled = true;
                        }
                    }
                });

                // only pop up the modal if some other loc-device group is scaling from it.
                if (nextBiggestDeviceIsScaled || anyLargestDeviceInOtherLocScaled) {
                    $scope.modalsDisplay.confirmSS = true;
                    var deviceForConfirmSS = $scope.l10n.interpolate('ITC.apps.deviceFamily.forModals.short.' + device);
                    var groupNameLocd;
                    var groupName = $scope.getDeviceGroupNameFromDevice(device);
                    if (groupName) {
                        groupNameLocd = $scope.l10n.interpolate("ITC.apps.deviceFamily.group." + groupName);
                    }
                    else {
                        groupNameLocd = deviceForConfirmSS;
                    }

                    var isSmallestDev = $scope.isSmallestDevInGroup(device, msgsMedia);

                    if ($scope.allowsVideo(device, language, msgsMedia)) { // if has app previews
                        parentScope.confirmSSHeader = $scope.l10n.interpolate('ITC.apps.ss.confirmSS.header');
                        if (isSmallestDev) {
                            var locKey = getLocKeyFromRootAndDevice('ITC.apps.ss.confirmSS.description.withPreviews.smallestDevice.', device, false);
                            parentScope.confirmSSText = $scope.l10n.interpolate(locKey, {'device': deviceForConfirmSS, 'deviceGroup': groupNameLocd });
                        }
                        else {
                            var locKey = getLocKeyFromRootAndDevice('ITC.apps.ss.confirmSS.description.', device, false);
                            parentScope.confirmSSText = $scope.l10n.interpolate(locKey, {'device': deviceForConfirmSS, 'deviceGroup': groupNameLocd });
                        }
                    }
                    else { // if no app previews (ie. apple watch)
                        parentScope.confirmSSHeader = $scope.l10n.interpolate('ITC.apps.ss.confirmSS.header.noPreviews');
                        if (isSmallestDev) {
                            var locKey = getLocKeyFromRootAndDevice('ITC.apps.ss.confirmSS.description.noPreviews.smallestDevice.', device, false);
                            parentScope.confirmSSText = $scope.l10n.interpolate(locKey, {'device': deviceForConfirmSS, 'deviceGroup': groupNameLocd });
                        }
                        else {
                            var locKey = getLocKeyFromRootAndDevice('ITC.apps.ss.confirmSS.description.noPreviews.', device, false);
                            parentScope.confirmSSText = $scope.l10n.interpolate(locKey, {'device': deviceForConfirmSS, 'deviceGroup': groupNameLocd });
                        }
                    }
                }
            }
        }

        $scope.isFirstDrop = function(loc, device, msgsMedia) {
            var langStr = $scope.getLanguageString(loc);  
            var imgs = $scope.getAllImages(msgsMedia).getGroup(langStr, device);
            var vids = $scope.getAllVids(msgsMedia).getGroup("ALL LANGUAGES", device);

            // thought: check json instead?
            var hasOnlyOneImage =  (imgs.length === 1 && (!vids || vids.length===0));
            var hasOnlyOneVideo =  (imgs.length === 0 && (vids && vids.length===1));
            return hasOnlyOneImage || hasOnlyOneVideo;
        }

        parentScope.updateWatchScreenshots = function(async) {
            // do nothing! This is no longer used. Watch is updated in updateSnapshotDetails()
        }

        parentScope.mainDropTrayChooseFileIsEnabled = function() {
            var enabled = false;
            if ($scope.tempPageContent.previewVideos && $scope.previewImages) {
                var readyForDrop = $scope.readyForDrop2($scope.currentDevice, $scope.currentLoc);
                if ($scope.numVideos > 0) {
                    enabled = (($scope.tempPageContent.previewVideos.length < $scope.numVideos) || ($scope.previewImages.length < $scope.numImages)) && readyForDrop;
                }
                else {
                    enabled = ($scope.previewImages.length < $scope.numImages) && readyForDrop;   
                }
                $scope.mainDropTrayChooseFileEnabled = enabled;
            }
            return enabled;
        }

        parentScope.readyForDrop2 = function(device, loc, msgsMedia) {
            if (loc === undefined) {
                return false;
            }
            var ready = $scope.videoReady2(device) && $scope.imagesLoaded2(device, loc, msgsMedia) && !$scope.imagesUploading(device, loc, msgsMedia); 

            return ready;
        };

        parentScope.imagesUploading = function(device, loc, msgsMedia) {
            if ($scope.tempPageContent.mediaData) {
                var numUploading = $scope.getMediaDataValue(loc, device, msgsMedia, "numImagesUploading");
                var areImagesUploading = numUploading && numUploading > 0;
                return areImagesUploading;
            }
            else {
                return false;
            }
        }

        $scope.imagesLoaded2 = function(device, loc, msgsMedia) { 
            if (!$scope.versionInfo) {
                return true;
            }
            var langStr = $scope.getLanguageString(loc);  
                          
            var imgsLoaded = true;                          
            var imgs = $scope.getAllImages(msgsMedia).getGroup(langStr, device);
            _.each(imgs, function(img) {
                if (!img.imageLoaded || !img.imageLoaded[device]) {
                    imgsLoaded = false;
                }
            });
            return imgsLoaded;
        };  

        // Returns true once the video snapshot is showing, which happens before the video is loaded.
        // So by "ready", we mean "showing" by the drop zone.
        $scope.videoReady2 = function(device) {
            var vids = $scope.tempPageContent.allVideos.getGroup("ALL LANGUAGES", device);
            if (vids && vids.length > 0) {
                var vid = vids[0];
                return vid.videoLoaded;
            }
            else {
                return true;
            }
        };

        // To get the resulting array of screenshots, get .value of what this method returns
        $scope.getScreenshotGroupByLocaleCode = function(localeCode, device) {
            
            var details = _.find($scope.versionInfo.details.value, function(langGroup) {
                return langGroup.language.toLowerCase() === localeCode.toLowerCase();
            });

            //var details = $scope.versionInfo.details.value[loc]; 
            
            var groups = details.displayFamilies.value;
            var groupForDevice = _.find(groups, function(group) {
                return (group.name === device);
            });
            return groupForDevice;
        }

        $scope.getScreenshotGroup = function(loc, device) {
            
            var details = $scope.versionInfo.details.value[loc]; 
            
            var groups = details.displayFamilies.value;
            var groupForDevice = _.find(groups, function(group) {
                return (group.name === device);
            });
            return groupForDevice;
        }

        parentScope.scaleImagesCheckboxChanged = function(loc, device, evt, msgsScreenshots) {

            // Only continue if this was caused by a checkbox click (this can be caused on load or on currentLoc change)
            if (evt === undefined || evt === null) {
                return;
            }

            //log("scaleImagesCheckboxChanged");
            
            // get the value from the checkbox's model
            var scale = $scope.getMediaDataValue(loc, device, msgsScreenshots, "scaleImages");
            
            if (scale !== null && scale !== undefined) { 
                // set the value in the json
                $scope.setImagesToOverridden(loc, device, scale, msgsScreenshots);

                // Set, for every device, $scope.tempPageContent.mediaData.setDataValue(loc, device, "groupToInheritFromIfScaled", groupToInheritFrom); 
                var deviceGroup = $scope.getDeviceGroupNameFromDevice(device);
                $scope.updateGroupsToInheritFrom(deviceGroup, msgsScreenshots);

                $scope.updateImagesBelow(loc, device, msgsScreenshots);
            }

        }

        // Given a device, say "iphone47", will return an array containing "iphone4" and "iphone35"
        parentScope.getAllDevsSmallerThan = function(device) {
            var devsInGroup = angular.copy($scope.getDevsInGroupWith(device));
            var index = devsInGroup.indexOf(device);
            // splice out all devs larger than device, and this device
            devsInGroup.splice(0, index+1); // removes index+1 elements from index 0
            return devsInGroup;
        }

        // get groups below belowGroup (ie. have smaller devices than), that inherit from interitingGroup
        // Note that belowGroup's loc is expected to be a number and inheritingFromGroup loc is expected to be a localeCode. Fix this later.
        $scope.getOtherEffectedGroups = function (belowGroup, inheritingFromGroup, msgsMedia) {
            var smallerDevs = $scope.getAllDevsSmallerThan(belowGroup.dev);
            var devsThatInherit = _.filter(smallerDevs, function(smallerDevice) {
                var smallerGroup = $scope.getMediaDataValue(belowGroup.loc, smallerDevice, msgsMedia, "groupToInheritFromIfScaled");
                var scaled = $scope.getMediaDataValue(belowGroup.loc, smallerDevice, msgsMedia, "scaleImages");
                if (scaled && smallerGroup.loc === inheritingFromGroup.loc && smallerGroup.dev === inheritingFromGroup.dev) {
                    return true;
                }
                else return false;
            });
            //log("this effects: ", devsThatInherit);
            var groupsThatInherit = _.map(devsThatInherit, function(dev) {
                var groupThatInherits = {};
                groupThatInherits.dev = dev;
                groupThatInherits.loc = belowGroup.loc;
                return groupThatInherits;
            });
            return groupsThatInherit;
        }

        parentScope.updateImagesBelow = function(loc, device, msgsScreenshots) {
            var inheritingFromGroup, effectedGroups;
            var scale = $scope.getMediaDataValue(loc, device, msgsScreenshots, "scaleImages");

            var thisGroup = {};
            thisGroup.dev = device;
            thisGroup.loc = loc;

            if (scale) { // if checkbox checked 

                // clear images from json
                $scope.deleteAllMedia2(null, device, loc, msgsScreenshots);

                // handle this group.
                $scope.inheritImages(thisGroup, msgsScreenshots);

                inheritingFromGroup = $scope.getMediaDataValue(loc, device, msgsScreenshots, "groupToInheritFromIfScaled");
            }
            else { // if checkbox UNchecked
                var langStr = $scope.getLanguageString(loc); 
    
                // handle this group. 
                // at this point there should be no images in json for this group, so faking it out this way is ok.
                $scope.getAllImages(msgsScreenshots).setGroup(langStr, device, new Array());

                if ($scope.allowsVideo(device, loc, msgsScreenshots)) { // don't remove the shared video if in non-prim loc
                    var vids = $scope.getAllVids(msgsScreenshots);
                    if (vids) {
                        vids.setGroup("ALL LANGUAGES", device, new Array());
                    }
                }
                //$scope.deleteAllMedia2(null, device, loc); // no - this will delete the parent's images, since this group points to the parent's images.

                inheritingFromGroup = {};
                inheritingFromGroup.loc = langStr;
                inheritingFromGroup.dev = thisGroup.dev;
            }

            effectedGroups = $scope.getOtherEffectedGroups(thisGroup, inheritingFromGroup, msgsScreenshots);
            
            _.each(effectedGroups, function(effectedGroup) { // calls setGroup with a copy of images on each group that inherits 
                $scope.inheritImages(effectedGroup, msgsScreenshots);
            });
            
        }

        // checks json and returns value of overridden flag
        parentScope.areImagesOverridden = function(loc, device, msgScreenshots) {
            var group = $scope.getScreenshotGroup(loc, device);
            var overridden = false;
            if (group) {
                if (msgScreenshots) {
                    overridden = group.messagesScaled.value;
                }
                else {
                    overridden = group.scaled.value;
                }
            }
            return overridden;
        }

        // checks json and returns value of overridden flag
        $scope.areImagesOverriddenByLocaleCode = function(localeCode, device, msgScreenshots) {
            var group = $scope.getScreenshotGroupByLocaleCode(localeCode, device);
            var overridden;
            if (msgScreenshots) {
                overridden = group.messagesScaled.value;
            }
            else {
                overridden = group.scaled.value;
            }
            return overridden;
        }

        // sets overridden flag in json.
        parentScope.setImagesToOverridden = function(loc, device, overriddenValue, msgScreenshots) {
            var group = $scope.getScreenshotGroup(loc, device);
            if (msgScreenshots) {
                group.messagesScaled.value = overriddenValue;
            }
            else {
                group.scaled.value = overriddenValue;
            }
        }

        parentScope.getScaledCheckboxText = function(loc, device, msgsMedia) {
            if ($scope.tempPageContent.mediaData) {
                var group = $scope.getMediaDataValue(loc, device, msgsMedia, "groupToInheritFromIfScaled");

                if (group) {
                    var localeCode = $scope.getLanguageString(loc); 
                    var locDevice = $scope.l10n.interpolate('ITC.apps.deviceFamily.long.inSentence.' + group.dev);
                    if (localeCode.toLowerCase() === group.loc.toLowerCase() && $scope.isCurrentPrimaryLanguage(localeCode) ) {   
                        var locKey = getLocKeyFromRootAndDevice('ITC.apps.ss.CheckboxText.withoutLang.', group.dev);
                        return $scope.l10n.interpolate(locKey, {'device': locDevice});
                    }
                    else {
                        var locLang = $scope.getLanguageStringDisplay(group.loc.toLowerCase(), true);
                        var locKey = getLocKeyFromRootAndDevice('ITC.apps.ss.CheckboxText.withLang.', group.dev);
                        return $scope.l10n.interpolate(locKey, {'device': locDevice, 'language': locLang});
                    }
                }
                else {
                    return "";
                }
            }
            else {
                return "";
            }
        }

        parentScope.dontShowScaleImagesCheckbox = function(loc, device, msgsMedia) {
            if ($scope.tempPageContent.mediaData) {
                var group = $scope.getMediaDataValue(loc, device, msgsMedia, "groupToInheritFromIfScaled");

                if (group) {
                    var devToInheritFrom = group.dev;
                    var locToInheritFrom = group.loc;

                    return ($scope.getLanguageString(loc) === locToInheritFrom && device === devToInheritFrom);
                }
                else {
                    return true;
                }
            }
            else {
                return true;
            }
        }

        /*
            Returns "We’ll use these for the @@groupName@@ display sizes and localizations selected in Media Manager."
            or "We’ll use these for other localizations selected in Media Manager.";
        */
        parentScope.getScalingInstructions = function(device, loc, msgsMedia) {
            var localeCode = $scope.getLanguageString(loc); 
            var isPrimary = $scope.isCurrentPrimaryLanguage(localeCode);
            var text = "";
            var groupName = $scope.getDeviceGroupNameFromDevice(device);
            
            if (isPrimary) { // just do this for primary loc.
                if ($scope.isMediaManagerShowing()) {
                    if (groupName) {
                        var isSmallestDev = $scope.isSmallestDevInGroup(device, msgsMedia);
                        var groupNameLocd = $scope.l10n.interpolate("ITC.apps.deviceFamily.group." + groupName);
                        if (isSmallestDev) {
                            var locKey = getLocKeyFromRootAndDevice('ITC.apps.ss.dropwellText.notScalingFromParent.inMM.noOtherDisplaySizesInGroup.', device, false);
                            text = $scope.l10n.interpolate(locKey);
                        }
                        else {
                            var locKey = getLocKeyFromRootAndDevice('ITC.apps.ss.dropwellText.notScalingFromParent.inMM.', device, false);
                            text = $scope.l10n.interpolate(locKey);
                        }
                    }
                    else {
                        text = $scope.l10n.interpolate('ITC.apps.ss.dropwellText.notScalingFromParent.inMM.noOtherDisplaySizesInGroup', {'groupName': groupName});    
                    }
                }
                else {
                    if (groupName) {
                        var groupNameLocd = $scope.l10n.interpolate("ITC.apps.deviceFamily.group." + groupName);
                        var locKey = getLocKeyFromRootAndDevice('ITC.apps.ss.dropwellText.notScalingFromParent.', device, false);
                        text = $scope.l10n.interpolate(locKey);
                    }
                    else {
                        text = $scope.l10n.interpolate('ITC.apps.ss.dropwellText.notScalingFromParent.noOtherDisplaySizesInGroup', {'groupName': groupName});    
                    }
                }
            }
            else {
                var isSmallestDev = $scope.isSmallestDevInGroup(device, msgsMedia);
                if ($scope.isMediaManagerShowing()) {
                    if (!isSmallestDev) {
                        var groupNameLocd = $scope.l10n.interpolate("ITC.apps.deviceFamily.group." + groupName);
                        var locKey = getLocKeyFromRootAndDevice('ITC.apps.ss.dropwellText.notScalingFromParent.inMM.nonPrimary.', device, false);
                        text = $scope.l10n.interpolate(locKey);
                    }
                }
                else {
                    if (!isSmallestDev) {
                        var groupNameLocd = $scope.l10n.interpolate("ITC.apps.deviceFamily.group." + groupName);
                        var locKey = getLocKeyFromRootAndDevice('ITC.apps.ss.dropwellText.notScalingFromParent.nonPrimary.', device, false);
                        text = $scope.l10n.interpolate(locKey, {'groupName': groupNameLocd});
                    }
                }
            }
            return text;
        }

        parentScope.getScaledDropwellText = function(device, loc, msgsMedia) { // if checkbox is checked
            if ($scope.tempPageContent.mediaData) {
                var group = $scope.getMediaDataValue(loc, device, msgsMedia, "groupToInheritFromIfScaled");
                
                if (group) {
                    var localeCode = $scope.getLanguageString(loc); 
                    var locDevice = $scope.l10n.interpolate('ITC.apps.deviceFamily.long.inSentence.' + group.dev);
                    var childDevice = $scope.l10n.interpolate('ITC.apps.deviceFamily.long.inSentence.' + device);
                    var language;
                    if (localeCode.toLowerCase() === group.loc.toLowerCase() && $scope.isCurrentPrimaryLanguage(localeCode) ) {   
                        language = "";
                    }
                    else {
                        language = $scope.getLanguageStringDisplay(group.loc, true);
                    }

                    if ($scope.isCurrentPrimaryLanguage(localeCode)) var locKey = getLocKeyFromRootAndDevice('ITC.apps.ss.dropwellText.scalingFromParent.primary.', device);
                    else var locKey = getLocKeyFromRootAndDevice('ITC.apps.ss.dropwellText.scalingFromParent.', device);

                    if (msgsMedia) locKey = locKey + ".noTrailers";

                    return $scope.l10n.interpolate(locKey, {'childDevice': childDevice, 'parentDevice': locDevice, 'parentLoc': language});   
                }
                else {
                    return "";
                }
            }
            else {
                return "";
            }
        }

        parentScope.getDeviceGroupsForApp = function() {
            var groups;
            if ($scope.isIOSApp()) {
                groups = $scope.deviceGroupNames;            
            }
            else {
                groups = [ $scope.currentDevice ];
            }

            return groups;
        }

        parentScope.getDeviceGroupNameFromDevice = function(device) {
            if (!device) return;
            var devGroup;
            if ($scope.isIOSApp() && $scope.devsSorted) {
                var keys = Object.keys($scope.devsSorted);

                devGroup = _.find(keys, function(deviceGroup) {
                    return _.contains($scope.devsSorted[deviceGroup], device);
                });
            }
            else {
                //devGroup = [ device ]; // the group just consists of the device itself
                devGroup = null; 
            }
            return devGroup;
        }

        parentScope.getDevsInDeviceGroup = function(deviceGroup) {
            if ($scope.isIOSApp() && deviceGroup && $scope.devsSorted) {
                var devs = $scope.devsSorted[deviceGroup]; 
                if (!devs) {
                    devs = [ deviceGroup ]; // treat deviceGroup as a dev. Example: Apple Watch.
                }
            }
            else {
                devs = [ deviceGroup ]; // treat deviceGroup as a dev.
            }
            return devs;
        }

        // Returns array of all devs in the same device group (iphone or ipad) as the given device.
        $scope.getDevsInGroupWith = function(device) {
            var devs;
            var groupName = $scope.getDeviceGroupNameFromDevice(device);
            if (groupName) {
                devs = $scope.getDevsInDeviceGroup(groupName);
            }
            else {
                devs = [ device ];
            }
            return devs;
        }

        $scope.isSmallestDevInGroup = function(device, msgsMedia) {
            if (!$scope.versionInfo) {
                return false;
            }
            var thisGroup = $scope.getDevsInGroupWith(device);
            
            var loc = $scope.getLanguageKey($scope.appOverviewData.primaryLocaleCode);
            var screenshotsInJSON;
            var smallestDev;
            _.each(thisGroup, function(devInGroup) {
                screenshotsInJSON = $scope.screenshotsExistInJSON(loc, devInGroup, msgsMedia);
                if (screenshotsInJSON) {
                    smallestDev = devInGroup;
                }
            });
            
            return smallestDev === device;
        }

        parentScope.isLargestDevInGroup = function(device) {
            var thisGroup = $scope.getDevsInGroupWith(device);
            var firstInGroup = (thisGroup[0] === device);
            return firstInGroup;
        }

        parentScope.setMediaDataValue = function(loc, device, forMsgsScreenshots, key, value) {
            if (forMsgsScreenshots) {
                $scope.tempPageContent.msgsMediaData.setDataValue(loc, device, key, value);
            }
            else {
                $scope.tempPageContent.mediaData.setDataValue(loc, device, key, value);
            }
        }

        parentScope.getMediaDataValue = function(loc, device, forMsgsScreenshots, key) {
            var val;
            if (forMsgsScreenshots) {
                val = $scope.tempPageContent.msgsMediaData.getDataValue(loc, device, key);
            }
            else {
                val = $scope.tempPageContent.mediaData.getDataValue(loc, device, key);
            }
            return val;
        }

        // Determines and sets $scope.tempPageContent.mediaData.setDataValue(loc, device, "groupToInheritFromIfScaled", groupToInheritFrom);
        parentScope.setGroupToInheritFrom = function(loc, device, forMsgsScreenshots) {
            var localeCode = $scope.getLanguageString(loc);
            var isPrimary = $scope.isCurrentPrimaryLanguage(localeCode);
            var groupToInheritFrom = {};

            // get other sorted devs
            var devsInGroup = $scope.getDevsInGroupWith(device);
            var index = devsInGroup.indexOf(device);

            if (isPrimary) {
                /* look at next biggest english (primary) device if there is one
                     is not overridden; is not scaled; checkbox not checked)? 
                                    YES (checkbox NOT checked) - use that
                                    NO (checkbox IS checked) - use whatever next biggest english device uses (recurse on that)
                */
                groupToInheritFrom.loc = localeCode;
                
                if (index === 0) {
                    groupToInheritFrom.dev = device;
                    $scope.setMediaDataValue(loc, device, forMsgsScreenshots, "groupToInheritFromIfScaled", groupToInheritFrom);
                    return groupToInheritFrom; // this is the top level device in primary lang.
                }
                else if (index > 0) {
                    var nextBiggestDevice = devsInGroup[index-1];
                    if (!$scope.areImagesOverridden(loc, nextBiggestDevice, forMsgsScreenshots)) {  // nextBiggestDevice checkbox is NOT checked
                        groupToInheritFrom.dev = nextBiggestDevice;
                        $scope.setMediaDataValue(loc, device, forMsgsScreenshots, "groupToInheritFromIfScaled", groupToInheritFrom);
                        return groupToInheritFrom;
                    }
                    else { // nextBiggestDevice checkbox IS checked
                        var group = $scope.setGroupToInheritFrom(loc, nextBiggestDevice, forMsgsScreenshots); // RECURSE!
                        $scope.setMediaDataValue(loc, device, forMsgsScreenshots, "groupToInheritFromIfScaled", group);
                        return group;
                    }
                }      
            }
            else { // if not in primary language
                /*
                    if on biggest chinese device, 
                         look at same device for english 
                            use that
                */
                if (index === 0) {
                    groupToInheritFrom.loc = $scope.appOverviewData.primaryLocaleCode;
                    groupToInheritFrom.dev = device;
                    $scope.setMediaDataValue(loc, device, forMsgsScreenshots, "groupToInheritFromIfScaled", groupToInheritFrom);
                    return groupToInheritFrom; // this is the top level device in primary lang.
                }
                /*
                    look at next biggest chinese device if there is one
                        is not overridden; is not scaled; checkbox not checked)? 
                                    A. YES (checkbox NOT checked) - use that
                                    B. NO (checkbox IS checked) - 
                                        C. if (that device is inheriting from non-prim lang)
                                            - use whatever that next biggest non-prim lang device uses (recurse on that)

                                        D. else if (that device is inheriting from english)
                                            look at same device for english (primary lang)
                                            is not overridden; is not scaled; checkbox not checked)? 
                                                         E. YES (checkbox NOT checked) - use that
                                                         F. NO (checkbox IS checked) - use whatever next biggest chinese device uses (recurse on that)

                */
                else if (index > 0) {
                    var nextBiggestDevice = devsInGroup[index-1];
                    if (!$scope.areImagesOverridden(loc, nextBiggestDevice, forMsgsScreenshots)) { // A. is not overridden; is not scaled; checkbox not checked)?  YES - use that
                        groupToInheritFrom.dev = nextBiggestDevice;
                        groupToInheritFrom.loc = localeCode;
                        $scope.setMediaDataValue(loc, device, forMsgsScreenshots, "groupToInheritFromIfScaled", groupToInheritFrom);
                        return groupToInheritFrom;
                    }
                    else { // B. is not overridden; is not scaled; checkbox not checked)? NO (checkbox IS checked)
                        var nextBiggestDeviceGroup = $scope.setGroupToInheritFrom(loc, nextBiggestDevice, forMsgsScreenshots); // RECURSE!
                        if (nextBiggestDeviceGroup.loc === localeCode) { // C.
                            $scope.setMediaDataValue(loc, device, forMsgsScreenshots, "groupToInheritFromIfScaled", nextBiggestDeviceGroup);
                            return nextBiggestDeviceGroup;
                        }
                        else { // D. 
                            // look at same device for english (primary lang)
                            if (!$scope.areImagesOverriddenByLocaleCode($scope.appOverviewData.primaryLocaleCode, device, forMsgsScreenshots)) { // E. is not overridden; is not scaled; checkbox not checked)? YES - use that
                                groupToInheritFrom.dev = device;
                                groupToInheritFrom.loc = $scope.appOverviewData.primaryLocaleCode;
                                $scope.setMediaDataValue(loc, device, forMsgsScreenshots, "groupToInheritFromIfScaled", groupToInheritFrom);
                                return groupToInheritFrom;
                            }
                            else { // F. is not overridden; is not scaled; checkbox not checked)? NO - use whatever next biggest chinese device uses (recurse on that)
                                var group = $scope.setGroupToInheritFrom(loc, nextBiggestDevice, forMsgsScreenshots); // RECURSE!
                                $scope.setMediaDataValue(loc, device, forMsgsScreenshots, "groupToInheritFromIfScaled", group);
                                return group;
                            }
                        }
                    }
                }      
            }
        }

        parentScope.getDisplayFamilyFromJSON = function(loc, device) {
            if ($scope.versionInfo && loc!==undefined && device!==undefined) {
                var trailer, details;

                details = $scope.versionInfo.details.value[loc]; 

                var groups = details.displayFamilies.value;
                var groupForDevice = _.find(groups, function(group) {
                    return (group.name === device);
                });
                return groupForDevice;  
            }     
            else return null; 
        }

        parentScope.isScaledCheckboxEditable = function(loc, device, msgsMedia) {
            var dispFam = parentScope.getDisplayFamilyFromJSON(loc, device);
            if (dispFam !== null && dispFam !== undefined) {
                if (msgsMedia) {
                    return dispFam.messagesScaled.isEditable;
                }
                else {
                    return dispFam.scaled.isEditable;
                }
            }
            else {
                return false;
            }
        }

        // Sets $scope.tempPageContent.mediaData.setDataValue(loc, device, "groupToInheritFromIfScaled", groupToInheritFrom); 
        // for every device in deviceNamesToDisplay
        parentScope.updateGroupsToInheritFrom = function(deviceGroup, forMsgsScreenshots) {
            var devs;
            if (!deviceGroup) {
                devs = new Array();
                var devGroups = $scope.getDeviceGroupsForApp();
                _.each(devGroups, function(devGroup) {
                    var moreDevs = $scope.getDevsInDeviceGroup(devGroup);
                    devs = devs.concat(moreDevs);
                });
            }
            else {
                devs = $scope.getDevsInDeviceGroup(deviceGroup);
            }

            _.each(devs, function(device) {
                $scope.setGroupToInheritFrom($scope.currentLoc, device, forMsgsScreenshots);
            });
        }

        // Tests if a drop well is full
        parentScope.isFull = function(loc, dev, msgsMedia) {
            if (!$scope.versionInfo || loc === undefined) {
                return false;
            }

            var langStr = $scope.getLanguageString(loc);
            var imgs = $scope.getAllImages(msgsMedia).getGroup(langStr, dev); 
            var hasImages = imgs && imgs.length>0;
            var atLeastOneLoaded = false;
            if (hasImages) {
                atLeastOneLoaded = $scope.atLeastOneImageLoaded(dev, loc, msgsMedia);
            }
            var allVids = $scope.getAllVids(msgsMedia);
            var vids;
            if (allVids) {
                vids = allVids.getGroup("ALL LANGUAGES", dev);
            }

            var hasVideo = false;
            var isPrimaryLoc = $scope.isPrimaryLoc(loc);
            if (isPrimaryLoc) {
                hasVideo = vids && vids.length>0;
            }

            return (hasImages && atLeastOneLoaded) || hasVideo;
        }

        $scope.atLeastOneImageLoaded = function(device, loc, msgsMedia) {
            var langStr = $scope.getLanguageString(loc);  
                          
            var imgLoaded = false;    
            var allImages = $scope.getAllImages(msgsMedia);                      
            var imgs = allImages.getGroup(langStr, device);
            _.each(imgs, function(img) {
                if (img.imageLoaded && img.imageLoaded[device]) {
                    imgLoaded = true;
                }
            });
            return imgLoaded;
        }; 

        $scope.updateSnapshotDetailsInMediaManager = function(async, mediaExisted) {
            
            if (!$scope.currentDevice) {
                return;
            }
            
            if ($scope.isMediaManagerShowing()) {

                log("updateSnapshotDetailsInMediaManager");
                
                if ($scope.showMessagesSection()) {
                    $scope.updateMsgSnapshotDetailsInMM(async, mediaExisted);
                }

                var error = $scope.getErrorsInGroup(parentScope.currentLoc, parentScope.currentDevice); //false; // clear out any errors from previous device/lang group. 
                $scope.setMediaDataValue($scope.currentLoc, $scope.currentDevice, false, "errorInPopup", error);
                parentScope.snapshotInfo.totalImageWidth = 0; // always start a new batch of images off with a totalImageWidth (before any are added) of 0.
                var videoWasLoading = ($scope.tempPageContent.appPreviewSnapshotShowing === false);
                parentScope.tempPageContent.appPreviewSnapshotShowing = true; 
                parentScope.tempPageContent.appPreviewDropped = false;
                parentScope.numImagesNotReady = 0;
                parentScope.snapshotInfo.maxHeight = 0;
                parentScope.snapshotInfo.showSlideShow = false;
                parentScope.snapshotInfo.currentIndex = -1;
                parentScope.snapshotInfo.videoShowing = false;
                parentScope.snapshotInfo.cantPlayVideo = {};
                parentScope.snapshotInfo.grabHasHappenedBefore = false;
                parentScope.tempPageContent.imagesNotYetLoaded = 0;

                parentScope.sortableOptions2.disabled = !$scope.areImagesEditableTopLevel(); 
           
                var that = this;
                var func = function() { 
                    parentScope.dontShowInstructions = true;       

                    var timeoutDelay = 0;   
                    if (mediaExisted) {
                        timeoutDelay = 500;
                    }        
                    
                    $timeout(function() {
                        var langStr = parentScope.getLanguageString(parentScope.currentLoc);  
                        $scope.updateGroupsToInheritFrom(null, false);
                        var devsToInitialize;
                        var devs = $scope.getAllDevicesForApp();
                        if ($scope.watchDataExists()) {
                            $scope.setGroupToInheritFrom($scope.currentLoc, 'watch', false);
                            devsToInitialize = angular.copy(devs);
                            devsToInitialize.push('watch');
                        }
                        else {
                            devsToInitialize = devs;
                        }
                        var groupsThatInherit = new Array();

                        _.each(devsToInitialize, function(device) {
                            parentScope.snapshotInfo.cantPlayVideo[device] = false;
                            
                            var overridden = $scope.areImagesOverridden($scope.currentLoc, device, false);
                            $scope.setMediaDataValue($scope.currentLoc, device, false, "open", !overridden || $scope.isLargestDevInGroup(device) || $scope.scrollToDevice===device);
                            
                            $scope.setMediaDataValue($scope.currentLoc, device, false, "scaleImages", overridden); // initiallize "scaleImages"

                            if (!$scope.areImagesOverridden($scope.currentLoc, device, false) || $scope.dontShowScaleImagesCheckbox($scope.currentLoc, device, false)) {
                                $scope.initializeImages($scope.currentLoc, device);
                                parentScope.dontShowInstructions = false; 
                            }
                            else {
                                // initialize parent's images before calling inheritImages
                                var parentGroup = $scope.getMediaDataValue($scope.currentLoc, device, false, "groupToInheritFromIfScaled");
                                var parentLocIndex = $scope.getLanguageKey(parentGroup.loc);
                                $scope.initializeImages(parentLocIndex, parentGroup.dev);
                                
                                var group = {};
                                group.dev = device;
                                group.loc = $scope.currentLoc;
                                groupsThatInherit.push(group);
                            }

                            $scope.setMediaDataValue($scope.currentLoc, device, false, "refresh", true);
                        });   
                        
                        _.each(groupsThatInherit, function(group) { // calls setGroup with a copy of images on each group that inherits 
                            $scope.inheritImages(group, false);
                        });

                        $scope.setupScrollListeners();

                        $timeout(function() {
                            $scope.smoothScroll(); 
                        }, 600); // wait for the wells to slide open/closed before scrolling - the itcScrollUpDown takes 600ms

                    }, timeoutDelay); // wait for disappearing images to animate away.
                };
                
                // Why a $timeout? Because of the important $apply call below that has to happen before the 
                // $broadcast. Without this $timeout, an exception occurs if a digest cycle is in progress. 
                // Since this method is called during a digest cycle (from $scope.loadAppDetails), 
                // an exception occurs otherwise. More info here: 
                // http://stackoverflow.com/questions/23070822/angular-scope-apply-vs-timeout-as-a-safe-apply
                if (async) {
                    $timeout(func);
                }
                else {
                    func();
                }

            }
        };

        parentScope.screenshotsExistInJSON = function(loc, dev, msgsMedia) {
            var screenshots;
            if (msgsMedia) {
                screenshots = $scope.getMsgsScreenshots(loc, dev);
            }
            else {
                screenshots = $scope.getScreenshots(loc, dev);
            }
            return (screenshots !== null);
        }

        // initializes allImages model for loc, device.
        parentScope.initializeImages = function(loc, device, msgsMedia) {
            var langStr = $scope.getLanguageString(loc);  

            var allImages = $scope.getAllImages(msgsMedia);
            // only initialize if not already initialized
            if (!allImages.initialized(langStr, device)) {

                // little fix in case sort order indices start at 1 (or more). They should start at 0!
                var startSortOrderIndex = $scope.getScreenshotSortOrderStartIndex(device, loc);

                var snapshotsArr;
                if (msgsMedia) {
                    snapshotsArr = $scope.getMsgsScreenshotsArr(loc, device);
                } 
                else {
                    snapshotsArr = $scope.getScreenshotsArr(loc, device);
                }

                if (snapshotsArr) { // snapshotsArr will be null in the case of msgs iphone35.
                    var snapshot;
                    var prevImgs = allImages.initializeGroup(langStr, device);
                    //log("initializing group for dev: " + device);
                    for (var i = 0; i < snapshotsArr.length; i++) {
                        snapshot = snapshotsArr[i].value; 
                        if ((snapshot.sortOrder-startSortOrderIndex) < $scope.numImages) {    
                            var dataPlusImageInfo = {};

                            var config = {
                                token: snapshot.assetToken,
                            };
                            var thumbnailConfig = {
                                token: snapshot.assetToken,
                                width: MAX_THUMBNAIL_SS_SCREENSHOT_SIZE,
                                height: MAX_THUMBNAIL_SS_SCREENSHOT_SIZE
                            };
                            dataPlusImageInfo.data = $scope.img_url_gen.generateUrlForToken(config);
                            dataPlusImageInfo.thumbnailData = $scope.img_url_gen.generateUrlForToken(thumbnailConfig);

                            //dataPlusImageInfo.data = snapshot.url;
                            //dataPlusImageInfo.thumbnailData = snapshot.thumbNailUrl;
                            dataPlusImageInfo.videoType = false;
                            prevImgs[snapshot.sortOrder - startSortOrderIndex] = dataPlusImageInfo;     
                        }
                    }

                    parentScope.$apply(); // important
                }
            }
        }

        /**** Functions that handle drops and drags over the media stack section ****/
        $scope.mediaStackZoneDrop = function(el) {
            el.removeClass("dragover");
            var popup = el.find(".errorPopUp");
            popup.addClass("open");
            $timeout(function() { // leave the error message up for 3 seconds after a drop. 
                popup.removeClass("open");
            }, 3000);   
        }
        
        $scope.mediaStackZoneDragover = function(el) {
            el.addClass("dragover");
            el.find(".errorPopUp").addClass("open");
        }
        
        $scope.mediaStackZoneDragleave = function(el) {
            el.removeClass("dragover");
            el.find(".errorPopUp").removeClass("open");
        }
        /**** End functions that handle drops and drags over the media stack section ****/

        parentScope.getAllImages = function(msgsImages) {
            var allImgs;
            if (msgsImages) {
                allImgs = $scope.allMsgsImages;
            }
            else {
                allImgs = $scope.allImages;
            }
            return allImgs;
        }

        parentScope.getAllVids = function(msgsVids) {
            var allVids;
            if (msgsVids) {
                allVids = $scope.tempPageContent.allMsgsVideos;
            }
            else {
                allVids = $scope.tempPageContent.allVideos;
            }
            return allVids;
        }

        $scope.inheritImages = function(childGroup, msgsMedia) {

            var langStr = $scope.getLanguageString(childGroup.loc);  

            var parentGroup = $scope.getMediaDataValue(childGroup.loc, childGroup.dev, msgsMedia, "groupToInheritFromIfScaled");

            var allImgs, allVids;
            if (msgsMedia) {
                allImgs = $scope.allMsgsImages;
                allVids = $scope.tempPageContent.allMsgsVideos;
            }
            else {
                allImgs = $scope.allImages;
                allVids = $scope.tempPageContent.allVideos;
            }

            // get images from parent
            var images = allImgs.getGroup(parentGroup.loc, parentGroup.dev);

            // set child's images
            allImgs.setGroup(langStr, childGroup.dev, images);

            // get vid from parent and set it on child
            if ($scope.allowsVideo(childGroup.dev, childGroup.loc, msgsMedia)) {
                var videos;
                if (!allVids.initialized("ALL LANGUAGES", parentGroup.dev)) { // videos may get initialized after the call to inheritImages.
                    videos = allVids.initializeGroup("ALL LANGUAGES", parentGroup.dev);
                }
                else {
                    videos = allVids.getGroup("ALL LANGUAGES", parentGroup.dev);
                }
                allVids.setGroup("ALL LANGUAGES", childGroup.dev, videos);
            }
        }

        $scope.setupScrollListeners = function() {
            var elements = document.querySelectorAll(".appTrailerScroll");
            elements = Array.prototype.slice.call(elements); // converts elements to an array (from a NodeList)

            // and then make each element call runOnScroll on scroll
            elements.forEach(function(element) {
              element.removeEventListener("scroll", $scope.runOnScroll); // just in case
              element.addEventListener("scroll", $scope.runOnScroll);
            });
        }

        $scope.runOnScroll = function(evt) {
            var el = evt.target;
            var jq_el = $(el);
            var header = jq_el.find(".dropwellHeader");
            var footer = jq_el.find(".dropwellFooter");
            var line = jq_el.find(".dropwellHeaderSpacing");
            header.css("margin-left", el.scrollLeft + "px");
            footer.css("margin-left", el.scrollLeft + "px");
            line.css("margin-left", el.scrollLeft + "px");
        }

        parentScope.deleteTransitionEnded = function(data) { 
            parentScope.$broadcast('zoneDeleteTransitionEnded', data); // makes the following zones slide left
        };

        var isImage = function(item) {
            var type = '|' + item.type.slice(item.type.lastIndexOf('/') + 1) + '|';
            return '|jpg|png|jpeg|'.indexOf(type) !== -1;
        }

        var isVideo = function(item) {
            var itemType = item.type.slice(item.type.lastIndexOf('/') + 1);
            var type = '|' + itemType + '|';

            // little test to see if this file type can be played in this browser
            //var elem = document.createElement("video");
            //console.log("Can this browser play a movie of type " + itemType + "? " + elem.canPlayType(item.type));
            //elem.remove();

            return '|mp4|quicktime|x-m4v|'.indexOf(type) !== -1;
        }

        parentScope.getNumVideosForDevice = function(device, loc, msgsMedia) {
            var isPrimaryLoc = $scope.isPrimaryLoc(loc);
            if (msgsMedia || !isPrimaryLoc) { // disallowing vids in iMessages (for now) and in non-prim locs. 
                return 0;
            }
            if ($scope.referenceData) {
                var hasLegalGeos = $scope.referenceData.legalAppPreviewGeos[device];
                if (hasLegalGeos && $scope.referenceData.appPreviewEnabled) {
                    return 1;   
                }
                else {
                    return 0; // show no video
                }
            }
            else {
                return 0;
            }
        };

        // Displayed under the drop tray
        parentScope.getDropwellInstructions = function(loc, device, msgsMedia) {  
            var instructions = "";

            if ($scope.versionInfo && loc !== undefined) {
                var langStr = $scope.getLanguageString(loc); 
                var imgs = $scope.getAllImages(msgsMedia).getGroup(langStr, device);
                var allVids = $scope.getAllVids(msgsMedia);
                var vids;
                if (allVids) {
                    vids = $scope.tempPageContent.allVideos.getGroup("ALL LANGUAGES", device); 
                }
                var numVideos = $scope.getNumVideosForDevice(device, loc, msgsMedia);

                if ($scope.l10n && imgs && $scope.l10n.interpolate) {  
                    if (numVideos > 0 && vids) {
                        instructions = $scope.l10n.interpolate('ITC.AppVersion.Media.Dropzone.DropTrayInstructionsWithVideo',
                               {'numVideos': vids.length,
                                'maxNumVideos': numVideos,
                                'numImages': imgs.length,
                                'maxNumImages': $scope.numImages});
                    }
                    else {
                        instructions = $scope.l10n.interpolate('ITC.AppVersion.Media.Dropzone.DropTrayInstructionsWithoutVideo',
                               {'numImages': imgs.length,
                                'maxNumImages': $scope.numImages});
                    }
                }
            }
            return instructions;
        } 

        parentScope.allowsVideo = function(device, loc, msgsMedia) {
            return ($scope.getNumVideosForDevice(device, loc, msgsMedia) === 1);
        }

        parentScope.getConfirmDeleteAllMediaForDeviceHeaderText = function() {
            if (!$scope.versionInfo) {
                return "";
            }

            var vids = $scope.tempPageContent.allVideos.getGroup("ALL LANGUAGES", parentScope.savedDeviceForDelete);
            var locKey;
            if (vids && vids.length > 0 && $scope.allowsVideo($scope.savedDeviceForDelete, $scope.currentLoc)) {
                locKey = getLocKeyFromRootAndDevice('ITC.apps.ss.confirmDeleteDeviceSpecificModal.withAppPreview.header.', parentScope.savedDeviceForDelete);
            }
            else {
                var localeCode = $scope.getLanguageString(parentScope.savedLocForDelete);
                var isPrimary = $scope.isCurrentPrimaryLanguage(localeCode);
                var lang;
                if (isPrimary) {
                    locKey = getLocKeyFromRootAndDevice('ITC.apps.ss.confirmDeleteDeviceSpecificModal.withoutAppPreview.header.', parentScope.savedDeviceForDelete);
                }
                else {
                    locKey = getLocKeyFromRootAndDevice('ITC.apps.ss.confirmDeleteDeviceSpecificModal.withoutAppPreview.header.withLoc.', parentScope.savedDeviceForDelete);
                    lang = $scope.getLanguageStringDisplay(localeCode, true);
                }
            }   
            return $scope.l10n.interpolate(locKey, {'device': $scope.l10n.interpolate('ITC.apps.deviceFamily.forModals.inSentence.' + parentScope.savedDeviceForDelete ),
                                                    'language': lang }); 
        }

        parentScope.getConfirmDeleteAllMediaForDeviceSubHeaderText = function(msgsMedia) {
            if (!$scope.versionInfo) {
                return "";
            }
            var localeCode = $scope.getLanguageString($scope.currentLoc);
            var isPrimary = $scope.isCurrentPrimaryLanguage(localeCode);
            var isSmallestDev = $scope.isSmallestDevInGroup(parentScope.savedDeviceForDelete, msgsMedia);

            var devGroup = $scope.getDeviceGroupNameFromDevice(parentScope.savedDeviceForDelete);
            var groupNameLocd;
            if (devGroup) {
                groupNameLocd = $scope.l10n.interpolate("ITC.apps.deviceFamily.group." + devGroup);
            }
            else {
                groupNameLocd = parentScope.savedDeviceForDelete;
            }

            var locKey;
            if (isPrimary) {
                if (isSmallestDev) {
                    locKey = 'ITC.apps.ss.confirmDeleteDeviceSpecificModal.subheader.locOnly';
                }
                else {
                    locKey = 'ITC.apps.ss.confirmDeleteDeviceSpecificModal.subheader.sizeAndLoc';
                }
            }
            else {
                locKey = 'ITC.apps.ss.confirmDeleteDeviceSpecificModal.subheader.sizeOnly';
            }
            return $scope.l10n.interpolate(locKey, {'deviceGroup': groupNameLocd}); 
        }

        parentScope.confirmDeleteAllMediaForDevice = function(e, device, loc, msgsMedia) { 
            if (e && $(e.target).hasClass("disabled")) {
                return;
            }

            var localeCode = $scope.getLanguageString(loc);
            var isPrimary = $scope.isCurrentPrimaryLanguage(localeCode);
            var isSmallestDev = $scope.isSmallestDevInGroup(device, msgsMedia); 
            if (!isPrimary && isSmallestDev) {
                // don't ask, just do.
                $scope.deleteMediaForDevice(loc, device, msgsMedia);
            }
            else { // ask
                parentScope.savedDeviceForDelete = device;
                parentScope.savedLocForDelete = loc;
                parentScope.savedIsMsgsFlagForDelete = msgsMedia;
                $scope.showDeleteAllMediaForDeviceModal(true);
            }
        }

        parentScope.showDeleteAllMediaForDeviceModal = function(show) {
            $scope.modalsDisplay.confirmDeleteDeviceMedia = show;
        }

        parentScope.deleteMediaForDevice = function(loc, device, msgsMedia) {
            $scope.deleteAllMedia2(null, device, loc, msgsMedia);

            $scope.showDeleteAllMediaForDeviceModal(false);
        }

        parentScope.dropwellDeleteAllEnabled = function(device, loc, msgsMedia) {
            if (!$scope.versionInfo || loc === undefined) {
                return false;
            }

            // get the value from the checkbox's model
            var scale = $scope.getMediaDataValue(loc, device, msgsMedia, "scaleImages");
            if (scale) {
                return false;
            }

            var language = $scope.getLanguageString(loc);
            var imgs = $scope.getAllImages(msgsMedia).getGroup(language, device);
            var vids = $scope.getAllVids(msgsMedia).getGroup("ALL LANGUAGES", device);
            var isPrim = $scope.isPrimaryLoc(loc);

            return ((isPrim && vids && vids.length > 0) || (imgs && imgs.length > 0)) && $scope.readyForDrop2(device, loc, msgsMedia); 
        }

        parentScope.dropwellChooseFileIsEnabled = function(device, loc, msgsMedia) {
            if (!$scope.versionInfo || loc === undefined) {
                return false;
            }

            // get the value from the checkbox's model
            var scale = $scope.getMediaDataValue(loc, device, msgsMedia, "scaleImages");
            if (scale) {
                return false;
            }

            var langStr = $scope.getLanguageString(loc); 
            var imgs = $scope.getAllImages(msgsMedia).getGroup(langStr, device);
            var vids = $scope.getAllVids(msgsMedia).getGroup("ALL LANGUAGES", device);

            var enabled = false;
            var numVideos = $scope.getNumVideosForDevice(device, loc, msgsMedia);
            if (imgs) {
                var readyForDrop = $scope.readyForDrop2(device, loc, msgsMedia);
                
                if (vids && numVideos > 0) {
                    enabled = ((vids.length < numVideos) || (imgs.length < $scope.numImages)) && readyForDrop;
                }
                else {
                    enabled = (imgs.length < $scope.numImages) && readyForDrop;   
                }
                //$scope.mainDropTrayChooseFileEnabled = enabled;
            }
            return enabled;
        }

        parentScope.isVideoEditable = function(device) {

            if (!$scope.referenceData || !$scope.versionInfo || $scope.currentLoc === undefined) {
                return false;
            }
            var trailer = $scope.getAppTrailerFromJSON($scope.currentLoc, device);

            return trailer && trailer.isEditable;
        }

        parentScope.isVideoEditableAndUploadable = function(device) {
            if (!$scope.referenceData || !$scope.versionInfo || $scope.currentLoc === undefined) {
                return false;
            }
            var trailer = $scope.getAppTrailerFromJSON($scope.currentLoc, device);
            return trailer && trailer.isEditable && $scope.previewUploadAllowed;
        }
        
        parentScope.onFileSelect2 = function($files, device, msgsMedia) { 
            // if the drop zone has a loader, don't accept additional drops.
            if (!$scope.readyForDrop2(device, $scope.currentLoc, msgsMedia) || !$scope.dropwellChooseFileIsEnabled(device, $scope.currentLoc, msgsMedia)) {   //!$scope.areImagesEditable(false)) {
                //console.log("not ready for drop.");
                return;
            }

            var file;
            // get number of image files
            var numImageFiles = 0;
            var imageFiles = new Array();
            var videoFiles = new Array(); 
            var maxNumVids = $scope.getNumVideosForDevice(device, $scope.currentLoc, msgsMedia);
            var vidNotUploadable = false;

            var error = false;
            
            $scope.setMediaDataValue($scope.currentLoc, device, msgsMedia, "errorInPopup", false);
            var localeCode = $scope.getLanguageString($scope.currentLoc);
            $scope.getAllImages(msgsMedia).clearGeneralErrors(localeCode, device);
            
            var langStr = $scope.getLanguageString($scope.currentLoc);
            var existingImages = $scope.getAllImages(msgsMedia).getGroup(langStr, device);
            var allVids = $scope.getAllVids(msgsMedia);
            var existingVids;
            if (allVids) {
                existingVids = allVids.getGroup("ALL LANGUAGES", device);
            }
                      
            for (var i = 0; i < $files.length; i++) {
                file = $files[i];
                if (maxNumVids>0 && isVideo(file) && $scope.isVideoEditable(device)) { 
                    if ($scope.isVideoEditableAndUploadable(device)) {
                        videoFiles.push(file);
                    }
                    else {
                        videoFiles.push(file); // just push it. 
                        vidNotUploadable = true;
                        //scope.error = scope.locFile['ITC.AppVersion.Media.CantUploadVideoDetail']; 
                    }
                }
                else if(isImage(file)) {
                    if ($scope.areImagesEditable(false)) {
                        imageFiles.push(file);
                    }
                    else {
                        error = $scope.l10n.interpolate('ITC.AppVersion.Media.ErrorMessages.ImagesUneditable');      
                    }
                } 
                else {
                    if (isVideo(file) && !$scope.isPrimaryLoc($scope.currentLoc)) {
                        if ($scope.isVideoEditable(device)) {
                            error = $scope.l10n.interpolate('ITC.AppVersion.Media.ErrorMessages.AppPreviewOnlyInPrimLoc');
                        }
                        else {
                            error = $scope.l10n.interpolate('ITC.AppVersion.Media.ErrorMessages.VideosUneditable');   
                        }
                    }
                    else {
                        if ($scope.isVideoEditable(device)) {
                            error = $scope.l10n.interpolate('ITC.AppVersion.Media.ErrorMessages.WrongFileType');
                        }
                        else {
                            error = $scope.l10n.interpolate('ITC.AppVersion.Media.ErrorMessages.VideosUneditable');   
                        }
                    }
                }
              
            }   
           
            var vidError = false;
            
            if (videoFiles.length > maxNumVids && !vidNotUploadable) { 
                error = $scope.l10n.interpolate('ITC.AppVersion.Media.ErrorMessages.TooManyVideosSelected',{'maxNumVideos': maxNumVids});
                vidError = true;
            }
            else if ($scope.isPrimaryLoc($scope.currentLoc) && existingVids && existingVids.length>0 && ((existingVids.length+videoFiles.length) > maxNumVids)) { // AppPreviewAlreadySelected error msg takes precedence over CantUploadVideoDetail
                error = $scope.l10n.interpolate('ITC.AppVersion.Media.ErrorMessages.AppPreviewAlreadySelected');
                vidError = true;
            }
            else if (vidNotUploadable) {
                error = $scope.l10n.interpolate('ITC.AppVersion.Media.CantUploadVideoDetail');
                vidError = true;
            }
            else {
                for (var i = 0; i < videoFiles.length; i++) {
                    file = videoFiles[i];
                    $scope.videoFileSelectedForUpload2(file, device); // TBD - iMessages for video.
                }
            }
            

            var numImagesToAdd = imageFiles.length;
            var max = $scope.numImages; 

            // if there's a video error, don't upload images.
            var tooManyImages = ((existingImages.length+imageFiles.length) > max); 
            if (vidError || tooManyImages) { 
                var numLeftToAdd = max - existingImages.length;

                // get the right tooManyImagesError
                var tooManyImagesError = $scope.l10n.interpolate('ITC.AppVersion.Media.ErrorMessages.TooManyImagesSelected',{'maxNumImages': numLeftToAdd});
                if (numLeftToAdd === 0) {
                    tooManyImagesError = $scope.l10n.interpolate('ITC.AppVersion.Media.ErrorMessages.ImagesAlreadySelected',{'maxNumImages': max});
                }
                else if (numLeftToAdd === 1) {
                    tooManyImagesError = $scope.l10n.interpolate('ITC.AppVersion.Media.ErrorMessages.TooManyImagesSelectedSingular');
                }

                if (vidError && tooManyImages) { // include both messages
                    error += " " + tooManyImagesError;
                }
                else if (tooManyImages) { // no video error
                    error = tooManyImagesError;
                }
            }
            else {
                for (var i = 0; i < numImagesToAdd; i++) {
                    file = imageFiles[i];
                    $scope.imageFileSelectedForUpload(file, device, msgsMedia); 
                }
            }

            $scope.setMediaDataValue($scope.currentLoc, device, msgsMedia, "errorInPopup", error);

        };

        parentScope.imageFileSelectedForUpload = function(file, device, isMsgsImage) { 
            var imgFile = URL.createObjectURL(file);
            //imgFile = $sce.trustAsResourceUrl(imgFile);  // necessary? doesn't seem so

            $scope.validateImageFileSize(file, imgFile, device, isMsgsImage);
            //scope.dontValidateFileSize(file, imgFile); // temporary to test uploader errors
        };

        parentScope.continueWithImageUpload = function(file, url, device, isMsgsImage) {
            var data = {};
            data.url = url;
            data.file = file;
            $scope.imageDropped(data, device, isMsgsImage);
        };

        parentScope.imageDropped = function(data, device, isMsgsImage) { 
            var startSortOrderIndex = $scope.getScreenshotSortOrderStartIndex(device, $scope.currentLoc);
            $scope.imageUploadFile(data.file, data.url, startSortOrderIndex, device, $scope.currentLoc, isMsgsImage);  // sortOrder starts at startSortOrderIndex.      
        };

        parentScope.validateImageFileSize = function(file, url, device, isMsgsImage) { 
            if ($scope.referenceData.imageSpecs) {
                var ret;
                var validSizesForDevice = $scope.referenceData.imageSpecs[device].geos;   
        
                var loadFunc = function() {
                    //console.log("dummy image loaded");
                    var width = this.width;
                    var height = this.height;

                    var dimensionsArr = new Array();
                    var expectedW, expectedH, expectedDimensionsArr;
                    for (var i = 0; i < validSizesForDevice.length; i++) {
                        expectedDimensionsArr = validSizesForDevice[i].split("x");
                        expectedW = parseInt(expectedDimensionsArr[0]); 
                        expectedH = parseInt(expectedDimensionsArr[1]); 
                        if (expectedW === width && expectedH === height) {
                            $scope.continueWithImageUpload(file, url, device, isMsgsImage); 
                            return;
                        }
                    }

                    // if got here, the height/width do not match the expected heights/widths.
                    var error;
                    if (device === 'watch') { // tbd: remove watchFile condition
                        error = $sce.trustAsHtml($scope.l10n.interpolate('ITC.AppVersion.Media.ErrorMessages.WrongImageDimensions.watch'));
                    }
                    else {
                        error = $sce.trustAsHtml($scope.l10n.interpolate('ITC.AppVersion.Media.ErrorMessages.WrongImageDimensions.' + $scope.versionInfo.platform));
                        
                    }
                    $scope.setMediaDataValue($scope.currentLoc, device, isMsgsImage, "errorInPopup", error);

                    $scope.$apply();

                    // remove dummy element from the dom here? it's not attached to anything in the dom, so 
                    // I *think* it gets garbage collected.
                };

                var loadErrorFunc = function() {
                    //console.log("some error happened getting image dimensions on the client. letting the server handle it.");
                    $scope.continueWithImageUpload(file, url, watchFile, isMsgsImage); 
                };

                // create a dummy element just to get the width and height of the image.
                var img = document.createElement('img');
                var jqImg = $(img);
                jqImg.bind('load', loadFunc);
                jqImg.bind('error', loadErrorFunc);
                img.src = url;
            }
        };

        parentScope.videoFileSelectedForUpload2 = function(file, device) {
            // validate file size here.
            if ($scope.validateVideoFileSize(file)) {
                var videoFile = URL.createObjectURL(file);
                var videoURL = $sce.trustAsResourceUrl(videoFile);   // this does seem necessary.

                $scope.validateVideoFileDimensions(file, videoURL, device); // calls continueWithUpload if it passes validation.
                //$scope.continueWithVideoUpload(file, videoURL);
            }
            else {
                var error = $scope.l10n.interpolate('ITC.AppVersion.Media.ErrorMessages.FileTooLarge');
                $scope.setMediaDataValue($scope.currentLoc, $scope.currentDevice, false, "errorInPopup", error); // TBD: determine if vid is msgs or not
            }          
        };

        parentScope.validateVideoFileDimensions = function(file, url, device) {
            if ($scope.referenceData.legalAppPreviewGeos) {
                //console.log("validateVideoFileDimensions");
                var validSizesForDevice = $scope.referenceData.legalAppPreviewGeos[device];

                var loadFunc = function() {
                    //console.log("dummy video loaded");
                    var width = this.videoWidth;
                    var height = this.videoHeight;

                    var dimensionsArr = new Array();
                    var expectedW, expectedH, expectedDimensionsArr;
                    for (var i = 0; i < validSizesForDevice.length; i++) {
                        expectedDimensionsArr = validSizesForDevice[i].split("x");
                        expectedW = parseInt(expectedDimensionsArr[0]); 
                        expectedH = parseInt(expectedDimensionsArr[1]); 
                        if (expectedW === width && expectedH === height) {
                            $scope.continueWithVideoUpload(file, url, device);
                            return;
                        }
                    }

                    // if got here, the height/width do not match the expected heights/widths.
                    //scope.error = "The image dimensions should be: " + validSizesForDevice.join(", ");
                    var error = $scope.l10n.interpolate('ITC.AppVersion.Media.ErrorMessages.WrongVideoDimensions',{'validDimensions': validSizesForDevice.join(", ")});
                    $scope.setMediaDataValue($scope.currentLoc, device, false, "errorInPopup", error); // TBD: determine if vid is msgs or not

                    $scope.$apply();

                    // remove dummy element from the dom here? it's not attached to anything in the dom, so 
                    // I *think* it gets garbage collected.
                };

                var loadErrorFunc = function() {
                    console.log("some error happened getting video dimensions on the client. letting the server handle it.");
                    $scope.continueWithVideoUpload(file, url, device);
                };

                // create a dummy element just to get the width and height of the video.
                var vid = document.createElement("video");
                var jqVid = $(vid);
                jqVid.on("loadeddata", loadFunc); 
                jqVid.on('error', loadErrorFunc);
                vid.src = url;
            }
        };

        parentScope.$on('menuPillClicked', function(event, data) { 
            if (data.id === "groupedDeviceMenuItem") {
                if ($scope.readyForDrop2($scope.currentDevice, $scope.currentLoc)) {
                    $scope.deviceChanged(data.value);
                    log("CLICKED: " + data.value);
                }   
            }
            else if (data.id === "groupedMsgsDeviceMenuItem") {
                if ($scope.readyForDrop2($scope.currentDevice, $scope.currentLoc, true)) {
                    $scope.msgsDeviceChanged(data.value);
                    log("CLICKED: " + data.value);
                }   
            }
            // else - some other menu pill click (if we add menu pills anywhere else in the page)
        });   

        parentScope.deviceChanged = function(device) { 
            parentScope.currentDevice = device;

            parentScope.setNumVideos();

            // update snapshot pics!
            parentScope.updateSnapshotDetails(true);
        }; 

        parentScope.msgsDeviceChanged = function(device) { 
            parentScope.currentMsgsDevice = device;
            log("msgsDeviceChanged");

            //parentScope.setNumVideos();

            // update snapshot pics!
            parentScope.updateMsgSnapshotDetails(true);

            $scope.$apply();
        }; 

        /* Checks if screenshots exists in any dev in getDeviceGroupsForApp */
        parentScope.hasScreenshotsInDevs = function(msgsMedia) { // assumes this is an ios app
            var hasNoScreenshots = true;
            var hasScreenshots;
            var screenshots;
            var groups = $scope.getDeviceGroupsForApp();
            _.each(groups, function(group) {
                var devs = $scope.getDevsInDeviceGroup(group);
                _.each(devs, function(dev) {
                    hasScreenshots = $scope.hasScreenshotsInDev(dev, msgsMedia);
                    if (hasScreenshots) {
                        hasNoScreenshots = false;
                    }
                });
            });
            return !hasNoScreenshots;
        }

        // Checks if screenshots exist in the given dev. If that dev is scaled, checks if they exist in the group it's scaling from.
        parentScope.hasScreenshotsInDev = function(dev, msgsMedia) {
            var hasScreenshots, screenshots;

            var scaled = $scope.areImagesOverridden($scope.currentLoc, dev, msgsMedia);
            if (scaled) {
                var parentGroup = $scope.getMediaDataValue($scope.currentLoc, dev, msgsMedia, "groupToInheritFromIfScaled");
                if (parentGroup) { // if scaling, get the screenshots from the group it's scaling from
                    if (msgsMedia) {
                        screenshots = $scope.getMsgsScreenshotsWithLocaleCode(parentGroup.loc, parentGroup.dev);
                    }
                    else {
                        screenshots = $scope.getScreenshotsWithLocaleCode(parentGroup.loc, parentGroup.dev);   
                    }
                    hasScreenshots = screenshots && screenshots.value && screenshots.value.length>0;
                } 
                else {
                    hasScreenshots = false;
                }
            }
            else {
                if (msgsMedia) {
                    screenshots = $scope.getMsgsScreenshots($scope.currentLoc, dev);
                }
                else {
                    screenshots = $scope.getScreenshots($scope.currentLoc, dev);
                }
                hasScreenshots = screenshots && screenshots.value && screenshots.value.length>0;
            }

            return hasScreenshots;
        }

        // Overwriting the watchDataExistsAndIsntEmptyAndIsEditable() from app_version_univ_cntl to also consider scaling.
        parentScope.watchDataExistsAndIsntEmptyAndIsEditable = function() {
            var watchDataExists = $scope.watchDataExists();
            if (watchDataExists) {      
                var watchScreenshots = $scope.getScreenshots($scope.currentLoc, "watch");
                var screenshotsAreEditable = watchScreenshots.value && watchScreenshots.isEditable;  
                if (screenshotsAreEditable) {
                    return true;
                } else { // if they're uneditable (as in a rfs app)
                    var hasWatchScreenshots = $scope.hasScreenshotsInDev("watch", false);
                    return hasWatchScreenshots;
                }           
            }  
            else {
                return false;
            }              
        }

        parentScope.areImagesEditableTopLevel = function() {
            if ($scope.versionInfo && $scope.currentLoc !== undefined) {
                return $scope.versionInfo.details.value[$scope.currentLoc].displayFamilies.isEditable;
            }
            else {
                return false;
            }
        }

        parentScope.areImagesEditable = function(watchImages) { 
            if (!$scope.referenceData || !$scope.versionInfo || $scope.currentLoc === undefined) {
                return false;
            }
            var device;
            if (watchImages) {
                if (!$scope.watchDataExists()) {
                    return false;
                }
                device = "watch";
            }
            else {
                device = $scope.currentDevice;
            }

            if ($scope.currentLoc !== undefined) { // Check for undefined because it can be 0.
                if (device) {
                    return $scope.getScreenshots($scope.currentLoc, device).isEditable;
                } 
                else {
                    return $scope.versionInfo.details.value[$scope.currentLoc].displayFamilies.isEditable;
                }
            }
            else {
                return $scope.versionInfo.details.isEditable;
            }
        }

        parentScope.getDragInstructions = function(device, loc, msgsMedia) {
            var instructionHeader = "";
            var locKey;
            var allImages = $scope.getAllImages(msgsMedia);

            if (device === undefined || loc === undefined || !allImages || !allImages[$scope.getLanguageString(loc)] || !allImages[$scope.getLanguageString(loc)][device] ) {
                return "";
            }
            else {
                var numImgs = 0;
                if (allImages[$scope.getLanguageString(loc)][device] && allImages[$scope.getLanguageString(loc)][device].arr) { 
                    numImgs = allImages[$scope.getLanguageString(loc)][device].arr.length;
                }
                var numImagesLeft = $scope.numImages - numImgs;
                if ($scope.allowsVideo(device, loc, msgsMedia)) {
                    locKey = 'ITC.AppVersion.Media.Dropzone.DragText.VideoAndImages';
                    if (numImagesLeft === 1) {
                        locKey = 'ITC.AppVersion.Media.Dropzone.DragText.VideoAndImage';
                    }
                    
                }
                else {
                    locKey = 'ITC.AppVersion.Media.Dropzone.DragText.Images';
                    if (numImagesLeft === 1) {
                        locKey = 'ITC.AppVersion.Media.Dropzone.DragText.Image';
                    }
                }
            }
            instructionHeader = $scope.l10n.interpolate(locKey,{'imageNumber': numImagesLeft});
            return instructionHeader;
        }

        parentScope.showDropwellText = function(device, loc, msgsMedia) {
            var allImages = $scope.getAllImages(msgsMedia);
            var allVideos = $scope.getAllVids(msgsMedia);
            if (device === undefined || loc === undefined || !allImages || !allImages[$scope.getLanguageString(loc)] || !allImages[$scope.getLanguageString(loc)][device]) {
                return false;
            }
            else {
                var noImgs = !allImages[$scope.getLanguageString(loc)][device] || !allImages[$scope.getLanguageString(loc)][device].arr || 
                    allImages[$scope.getLanguageString(loc)][device].arr.length===0;
                var isPrimaryLoc = $scope.isPrimaryLoc(loc);    
                var noVids = !isPrimaryLoc || !allVideos || !allVideos['ALL LANGUAGES'] || !allVideos['ALL LANGUAGES'][device] || !allVideos['ALL LANGUAGES'][device].arr || 
                    allVideos['ALL LANGUAGES'][device].arr.length===0;
                return noImgs && noVids && $scope.areImagesEditableTopLevel(); 
            }
        }

        parentScope.hasMedia = function(loc, device, msgsMedia) {
            var screenshotsArr;
            if (msgsMedia) {
                screenshotsArr = $scope.getMsgsScreenshotsArr(loc, device);
            }
            else {
                screenshotsArr = $scope.getScreenshotsArr(loc, device);
            } 
            var hasScreenshots = screenshotsArr && screenshotsArr.length>0; 
            var hasVideo = false;
            
            if (!msgsMedia) { // messages currently has no video
                var dataForDevice = $scope.getAppTrailerFromJSON(loc, device);
                if (dataForDevice) {
                    hasVideo = dataForDevice.value !== null; 
                } 
            }
            
            return hasScreenshots || hasVideo;
        }

        parentScope.hasAppPreview = function(loc, device, msgsMedia) {
            var hasVideo = false;
            
            if (!msgsMedia) { // messages currently has no video
                var dataForDevice = $scope.getAppTrailerFromJSON(loc, device);
                if (dataForDevice) {
                    hasVideo = dataForDevice.value !== null; 
                } 
            }
            
            return hasVideo;
        }

        // Overwriting parent scope's updateDevices method!
        parentScope.updateDevices = function() {
            
            parentScope.deviceNameMap = {};
            parentScope.deviceNames = new Array(); // just for correct sort order.
            parentScope.deviceNamesToDisplay = new Array();
            
            if (parentScope.referenceData && parentScope.l10n && parentScope.versionInfo && (parentScope.currentLoc!==undefined)) { // these 4 pieces of info come in separately, asynchronously. make sure we have them all.
                //log("in child updateDevices");
                var appType = $scope.versionInfo.platform;
                var device;
                var details = parentScope.versionInfo.details.value[parentScope.currentLoc];
                var isEditable = details.displayFamilies.isEditable;

                var devices = parentScope.referenceData.deviceFamilies[appType];

                for (var i = 0; i < devices.length; i++) { 
                    device = devices[i];
                    var locKey = "ITC.apps.deviceFamily." + device;
                    var userFriendlyName = parentScope.l10n.interpolate(locKey);
                    parentScope.deviceNameMap[device] = userFriendlyName;
                    parentScope.deviceNames[i] = device; 
                    if (device !== "watch") {
                        var hasMedia = $scope.hasMedia($scope.currentLoc, device); // TBD: figure out how this changes for iMessages
                        var scaled = $scope.areImagesOverridden($scope.currentLoc, device, false);
                        if (hasMedia || isEditable || scaled) {
                            parentScope.deviceNamesToDisplay.push(device);

                            if (!$scope.isIOSApp())  {
                                if (!$scope.currentDevice) {    
                                    parentScope.currentDevice = device;
                                    parentScope.currentMsgsDevice = device;
                                }
                            }
                        }
                    }
                }

                if ($scope.isIOSApp()) { // only fill deviceGroups if this is an ios version.

                    $scope.orderIOSDevices(); 

                    // fill parentScope.deviceGroups with "iphone" and "ipad".
                    // fill parentScope.deviceGroupNameMap
                    parentScope.deviceGroups = new Array();
                    parentScope.deviceGroupNames = new Array();
                    parentScope.deviceGroupNameMap = {};
                    
                    $scope.addToDeviceGroupNameMap($scope.IPHONE_GROUP);
                    $scope.addToDeviceGroupNameMap($scope.IPAD_GROUP);
                    
                    // Make the first pill be currently selected.
                    _.each(parentScope.deviceGroups, function(devGroup) {
                        if (!parentScope.currentDevice) {    
                            parentScope.currentDevice = devGroup;
                            parentScope.currentMsgsDevice = devGroup;
                        }
                    });
                }
                $scope.initCantPlayVideoListeners();    
            }
        }; 

        parentScope.hasErrorsInGroup = function(device, loc, msgsMedia) {
            // Note: add other error checks that should prevent save here:

            // Jenn requested I remove the check for no screenshots. Leaving this commented out as I think
            // we might change our minds later
            //var noSnapshots = $scope.hasNoScreenshot(device, loc);

            /*if (loc === undefined) {
                return false;
            }*/
            var allImages = $scope.getAllImages(msgsMedia);
            var allVideos = $scope.getAllVids(msgsMedia);

            var language = $scope.getLanguageString(loc);
            var hasSaveErrors = allImages.hasErrorsInGroup(language, device);
            var hasDeviceSpecificError = allImages.hasLanguageDeviceSpecificError(language, device) ||
                                         (allVideos && allVideos.hasLanguageDeviceSpecificError(language, device));

            //return noSnapshots || hasSaveErrors || hasDeviceSpecificError;
            return hasSaveErrors || hasDeviceSpecificError;
        }

        parentScope.showMediaPills = function() {
            return $scope.isIOSApp() && $scope.deviceGroups.length > 1;
        }

        $scope.addToDeviceGroupNameMap = function(groupName) {
            var hasDeviceInGroup = false;
            _.each($scope.deviceNamesToDisplay, function(deviceToDisplay) {
                if (deviceToDisplay.startsWith(groupName)) {
                    hasDeviceInGroup = true;
                }
            });

            if (hasDeviceInGroup) {
                var largestInGroup = parentScope.devsSorted[groupName][0];
                parentScope.deviceGroups.push(largestInGroup);
                parentScope.deviceGroupNames.push(groupName);
                parentScope.deviceGroupNameMap[largestInGroup] = parentScope.l10n.interpolate("ITC.apps.deviceFamily.group." + groupName); 
            }
        }

        parentScope.isIOSApp = function() {
            return ($scope.versionInfo && $scope.versionInfo.platform === "ios");
        }

        $scope.orderIOSDevices = function() {
            parentScope.devsSorted = {};
            $scope.orderDevicesForGroup($scope.IPHONE_GROUP);
            $scope.orderDevicesForGroup($scope.IPAD_GROUP);
        }

        $scope.getAllDevicesForApp = function() {
            var devGroups = $scope.getDeviceGroupsForApp();

            var devs = new Array();
            _.each(devGroups, function(groupName) {
                var devsInGroup = $scope.getDevsInDeviceGroup(groupName);
                devs = devs.concat(devsInGroup);
            });

            return devs;
        }

        $scope.orderDevicesForGroup = function(group) {
            // filter
            parentScope.devsSorted[group] = _.filter(parentScope.deviceNames, function(device) {
                return device.startsWith(group);
            });
            // sort by diameter
            parentScope.devsSorted[group] = _.sortBy(parentScope.devsSorted[group], function(device) {
                return $scope.getLargestDiameterForDevice(device);
            }).reverse();
        }

        // Good old Pythagorean theorem
        $scope.getDiameter = function(a, b) {
            return Math.sqrt((a*a)+(b*b));
        }

        $scope.getLargestDiameterForDevice = function(device) {
            var geos = parentScope.referenceData.imageSpecs[device].geos;
            var largestC = 0;
            var c, dimArray;
            _.each(geos, function(geo) {
                dimArray = geo.split("x");
                c = $scope.getDiameter(parseInt(dimArray[0]), parseInt(dimArray[1]));
                if (c > largestC) {
                    largestC = c;
                }
            });
            //log("diam for " + device + " is " + largestC);
            return largestC;
        }

        /* **************************************************
        CONFIRM LEAVE FUNCTIONS
        ************************************************** */
        
        /* Show/hide the media manager */
        parentScope.reallyShowMediaManager = function(show, tab, scrollToDevice) {
            $scope.tempPageContent.showMediaManager=show;
            $scope.$emit("hideAppOverview", show);
            $scope.$emit("hideSidebar", show);

            if (show) {
                $scope.changeMMTab(tab); // some scrolling issues here because tab doesn't change until an apply() which only happens at end of this function. To be fixed.
                
                // Push a fake state into the browser's history so if user clicks "back", will stay on this page, but just hide the media manager 
                var url;
                if ($state.current.name === "app_overview.store.versioninfo") {
                    url =  'app/' + $scope.adamId + '/' + $scope.versionInfo.platform + '/versioninfo';
                } else { //state is: app_overview.store.versioninfo.deliverable
                    url =  'app/' + $scope.adamId + '/' + $scope.versionInfo.platform + '/versioninfo/deliverable'
                }
                history.pushState(null, null, url);
                
            }
            if (!show) { // if hiding, set mm content back to top
                var contentWrapper = $('.pane-layout-content-wrapper.scrollMe');
                contentWrapper.animate({
                    scrollTop: 0
                }, 0);  

                if ($scope.tempPageContent.backClicked) {
                    $scope.tempPageContent.backClicked = false; // and nothing else.
                }
                else {
                    history.back(); // since we pushed a fake state by showing MM, pop it but calling back(), but only if the back button wasn't clicked
                }
            }

            parentScope.scrollToDevice = scrollToDevice;   
            parentScope.tempPageContent.mmShowing = show;

            $scope.updateSnapshotDetails(true);  
        }

        // This event gets fired on a browser 'back' click. We're listening for it to fake out 'back' clicks from MM.
        window.addEventListener('popstate', function(event) {        
            if ($scope.tempPageContent.showMediaManager) { // if MM is showing 
                $scope.tempPageContent.backClicked = true;
                $scope.showMediaManager(false);
            }
        });

        /* On user navigating to mm - check if there are changes and popup message if there are */
        parentScope.showMediaManager = function(show, tab, scrollToDevice) {
            if (show) {
                if ($scope.tempPageContent.confirmLeaveWithModalShowing.needToConfirm || $scope.tempPageContent.confirmLeave.needToConfirm) {
                    parentScope.tempPageContent.savedGoToTab = tab;
                    parentScope.tempPageContent.savedGoToDevice = scrollToDevice;
                    $scope.tempPageContent.confirmLeave.showMMConfirmLeaveModal = true; 
                } else { // just go to mm.
                    $scope.reallyShowMediaManager(show, tab, scrollToDevice);
                } 
            }
            else { // hiding
                if ($scope.tempPageContent.confirmLeaveWithModalShowing.needToConfirm || $scope.tempPageContent.confirmLeave.needToConfirm) {
                    //parentScope.tempPageContent.savedGoToTab = tab;
                    //parentScope.tempPageContent.savedGoToDevice = scrollToDevice;
                    $scope.tempPageContent.confirmLeave.showMMConfirmLeaveModal = true; 
                    if ($scope.tempPageContent.backClicked) {
                        $scope.$apply(); // otherwise the modal won't actually appear (because back button doesn't cause a digest loop)
                    }
                } else { // just hide mm.
                    $scope.reallyShowMediaManager(show, tab, scrollToDevice);
                }
            }               
              
        }
        
        // Called if "don't save" button is clicked
        $scope.confirmLeaveModalFunctions.leavePage2 = function() {
            var leavingFromMM = $scope.tempPageContent.mmShowing;
            $scope.reloadVersionDetails(!leavingFromMM);
            $scope.tempPageContent.confirmLeave.showMMConfirmLeaveModal = false;
        }

        // Called if "cancel" is clicked.
        $scope.confirmLeaveModalFunctions.stayOnPage2 = function() {
            $scope.tempPageContent.confirmLeave.showMMConfirmLeaveModal = false;
        }

        // Called if "save" is clicked.
        $scope.confirmLeaveModalFunctions.saveChanges2 = function() {
            $scope.tempPageContent.confirmLeave.showMMConfirmLeaveModal = false;
            $scope.saveVersionDetails();
        }

    }


    itcApp.register.controller('ssController', ['$scope', '$rootScope', '$state','$stateParams','$upload', '$filter', '$timeout', '$sce', 'ai', 'promoArtService', 'appVersionReferenceDataService','$q', 'ITC', 'univPurchaseService', 'getLocKeyFromRootAndDevice', ssController]);
    
});
